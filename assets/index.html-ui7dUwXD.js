import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,o as u,c as m,a as i,b as t,d as o,w as n,e as s}from"./app-CRnFokh3.js";const g={},b={href:"https://github.com/ZLMediaKit/ZLMediaKit/blob/master/LICENSE",target:"_blank",rel:"noopener noreferrer"},f={href:"https://en.cppreference.com/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/ZLMediaKit/ZLMediaKit",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/ZLMediaKit/ZLMediaKit/pulls",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/ZLMediaKit/ZLMediaKit",target:"_blank",rel:"noopener noreferrer"},c={href:"https://github.com/ZLMediaKit/ZLMediaKit",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/ZLMediaKit/ZLMediaKit",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/ZLMediaKit/ZLMediaKit",target:"_blank",rel:"noopener noreferrer"},w={href:"https://hub.docker.com/r/zlmediakit/zlmediakit/tags",target:"_blank",rel:"noopener noreferrer"},T={href:"https://hub.docker.com/r/zlmediakit/zlmediakit/tags",target:"_blank",rel:"noopener noreferrer"},M={href:"https://github.com/ZLMediaKit/ZLMediaKit/tree/master/api/include",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/ZLMediaKit/ZLMediaKit/tree/master/server",target:"_blank",rel:"noopener noreferrer"},R={href:"https://github.com/ZLMediaKit/ZLMediaKit/issues/511",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com/ksvc/FFmpeg/wiki",target:"_blank",rel:"noopener noreferrer"},H={href:"https://github.com/veovera/enhanced-rtmp",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/ZLMediaKit/ZLMediaKit/tree/master/api/include",target:"_blank",rel:"noopener noreferrer"},K={start:"2"};function C(Z,e){const r=a("ExternalLinkIcon"),l=a("RouterLink"),p=a("Mermaid");return u(),m("div",null,[e[69]||(e[69]=i("h1",{id:"an-high-performance-enterprise-level-streaming-media-service-framework-based-on-c-11",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#an-high-performance-enterprise-level-streaming-media-service-framework-based-on-c-11","aria-hidden":"true"},"#"),t(" An high-performance, enterprise-level streaming media service framework based on C++11.")],-1)),i("p",null,[i("a",b,[e[0]||(e[0]=i("img",{src:"https://img.shields.io/badge/license-MIT-green.svg",alt:"badge",loading:"lazy"},null,-1)),o(r)]),i("a",f,[e[1]||(e[1]=i("img",{src:"https://img.shields.io/badge/language-c++-red.svg",alt:"badge",loading:"lazy"},null,-1)),o(r)]),i("a",v,[e[2]||(e[2]=i("img",{src:"https://img.shields.io/badge/platform-linux | macos | windows-blue.svg",alt:"badge",loading:"lazy"},null,-1)),o(r)]),i("a",S,[e[3]||(e[3]=i("img",{src:"https://img.shields.io/badge/PRs-welcome-yellow.svg",alt:"badge",loading:"lazy"},null,-1)),o(r)])]),i("p",null,[i("a",h,[e[4]||(e[4]=i("img",{src:"https://github.com/ZLMediaKit/ZLMediaKit/actions/workflows/android.yml/badge.svg",alt:"badge",loading:"lazy"},null,-1)),o(r)]),i("a",c,[e[5]||(e[5]=i("img",{src:"https://github.com/ZLMediaKit/ZLMediaKit/actions/workflows/linux.yml/badge.svg",alt:"badge",loading:"lazy"},null,-1)),o(r)]),i("a",k,[e[6]||(e[6]=i("img",{src:"https://github.com/ZLMediaKit/ZLMediaKit/actions/workflows/macos.yml/badge.svg",alt:"badge",loading:"lazy"},null,-1)),o(r)]),i("a",P,[e[7]||(e[7]=i("img",{src:"https://github.com/ZLMediaKit/ZLMediaKit/actions/workflows/windows.yml/badge.svg",alt:"badge",loading:"lazy"},null,-1)),o(r)])]),i("p",null,[i("a",w,[e[8]||(e[8]=i("img",{src:"https://github.com/ZLMediaKit/ZLMediaKit/actions/workflows/docker.yml/badge.svg",alt:"badge",loading:"lazy"},null,-1)),o(r)]),i("a",T,[e[9]||(e[9]=i("img",{src:"https://img.shields.io/docker/pulls/zlmediakit/zlmediakit",alt:"badge",loading:"lazy"},null,-1)),o(r)])]),e[70]||(e[70]=i("h2",{id:"project-features",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#project-features","aria-hidden":"true"},"#"),t(" Project Features")],-1)),i("ul",null,[e[28]||(e[28]=i("li",null,"Developed with C++11, avoiding the use of raw pointers, providing stable and reliable code with superior performance.",-1)),e[29]||(e[29]=i("li",null,"Supports multiple protocols (RTSP/RTMP/HLS/HTTP-FLV/WebSocket-FLV/GB28181/HTTP-TS/WebSocket-TS/HTTP-fMP4/WebSocket-fMP4/MP4/WebRTC), and protocol conversion.",-1)),e[30]||(e[30]=i("li",null,"Developed with multiplexing/multithreading/asynchronous network IO models, providing excellent concurrency performance and supporting massive client connections.",-1)),e[31]||(e[31]=i("li",null,"The code has undergone extensive stability and performance testing, and has been extensively used in production environments.",-1)),e[32]||(e[32]=i("li",null,"Supports all major platforms, including linux, macos, ios, android, and windows.",-1)),e[33]||(e[33]=i("li",null,"Supports multiple instruction set platforms, such as x86, arm, risc-v, mips, Loongson, and Shenwei.",-1)),i("li",null,[e[11]||(e[11]=t("Provides ultra-fast startup, extremely low latency (")),o(l,{to:"/reference/test/delay_test.html"},{default:n(()=>e[10]||(e[10]=[t("within 500 milliseconds, and can be as low as 100 milliseconds")])),_:1}),e[12]||(e[12]=t("), and excellent user experience."))]),i("li",null,[e[14]||(e[14]=t("Provides a comprehensive standard ")),i("a",M,[e[13]||(e[13]=t("C API")),o(r)]),e[15]||(e[15]=t(" that can be used as an SDK or called by other languages."))]),i("li",null,[e[17]||(e[17]=t("Provides a complete ")),i("a",y,[e[16]||(e[16]=t("MediaServer")),o(r)]),e[18]||(e[18]=t(" server, which can be deployed directly as a commercial server without additional development."))]),i("li",null,[e[21]||(e[21]=t("Provides a complete ")),o(l,{to:"/guide/media_server/restful_api.html"},{default:n(()=>e[19]||(e[19]=[t("restful api")])),_:1}),e[22]||(e[22]=t(" and ")),o(l,{to:"/guide/media_server/web_hook_api.html"},{default:n(()=>e[20]||(e[20]=[t("web hook")])),_:1}),e[23]||(e[23]=t(", supporting rich business logic."))]),e[34]||(e[34]=i("li",null,"Bridges the video surveillance protocol stack and the live streaming protocol stack, and provides comprehensive support for RTSP/RTMP.",-1)),e[35]||(e[35]=i("li",null,"Fully supports H265/H264/AAC/G711/OPUS.",-1)),e[36]||(e[36]=i("li",null,"Provides complete functions, including clustering, on-demand protocol conversion, on-demand push/pull streams, playback before publishing, and continuous publishing after disconnection.",-1)),e[37]||(e[37]=i("li",null,"Provides ultimate performance, supporting 10W-level players on a single machine and 100Gb/s-level IO bandwidth capability.",-1)),i("li",null,[e[25]||(e[25]=t("Provides ultimate user experience with ")),o(l,{to:"/reference/documents/exclusive_features.html"},{default:n(()=>e[24]||(e[24]=[t("exclusive features")])),_:1}),e[26]||(e[26]=t("."))]),i("li",null,[i("a",R,[e[27]||(e[27]=t("Who is using zlmediakit?")),o(r)])]),e[38]||(e[38]=i("li",null,"Fully supports IPv6 networks.",-1))]),e[71]||(e[71]=s('<h2 id="project-positioning" tabindex="-1"><a class="header-anchor" href="#project-positioning" aria-hidden="true">#</a> Project Positioning</h2><ul><li>Cross-platform streaming media solution for mobile and embedded systems.</li><li>Commercial-grade streaming media server.</li><li>Network programming secondary development SDK.</li></ul><h2 id="feature-list" tabindex="-1"><a class="header-anchor" href="#feature-list" aria-hidden="true">#</a> Feature List</h2><h3 id="overview-of-features" tabindex="-1"><a class="header-anchor" href="#overview-of-features" aria-hidden="true">#</a> Overview of Features</h3>',4)),o(p,{id:"mermaid-128",code:"eJx1k99PgzAQx9/3V/QRH4jR+GB8MGHQyTKQhnYz2iwLYcyRzLGwTmOc/7vXH9BNGAn0eve5b69H67ruQJRiUzygUZGJQ13sB9K32lRf+TqrBWLBAMHj8ZTFZI5c9/FIpjRESYrINIqOaOiMt3n1UW7f0V7URaasXV2JKq82VzpZZtP+bAN4PGSMuIxeq3EUza7DiDYZZ6RBY3LXDT8Nb+9v7m+4Ge2KDfCChynzuR66YZoyDm83gMMkxlx9u8HxM5myRcJCnPJErIu63b+tEM3GHhqNYoKfmrShDCL/5y2Ki2WZTUrxq/y+9Ac8OYjdQfQ0da6oQGXLMihLsRfzVfawytw8qxE57Nc2z+BAQ8tS7Cdp4ICF6iKv6iUA+idJQLeFRN6ro00TkktF4xk2K0XlZ2H0rTi0TSXCiHab7NuqzpLAgVc7rAxE5Klw5AdJyR4AzsFCOhwwLjFwTjQDhjpAMECf7y7xzOCMXlwVss2y5zq226b4hfSoHfQCcQvEfYA5pZoxE401+25VTiROYvIiLOScOM216TDwI2niTzAzYDu3tOlIIwhTo8fof8CqKcqKNWjbu7Y86WjqA7uLnVSo2ZMSVcIfdihA0w=="}),i("ul",null,[e[55]||(e[55]=s("<li><p>RTSP[S]</p><ul><li>RTSP[S] server, supports RTMP/MP4/HLS to RTSP[S] conversion, supports devices such as Amazon Echo Show</li><li>RTSP[S] player, supports RTSP proxy, supports generating silent audio</li><li>RTSP[S] push client and server</li><li>Supports four RTP transmission modes: <code>rtp over udp</code> <code>rtp over tcp</code> <code>rtp over http</code> <code>rtp multicast</code></li><li>Server/client fully supports Basic/Digest authentication, asynchronous configurable authentication interface</li><li>Supports H265 encoding</li><li>The server supports RTSP pushing (including <code>rtp over udp</code> and <code>rtp over tcp</code>)</li><li>Supports H264/H265/AAC/G711/OPUS/MJPEG encoding. Other encodings can be forwarded but cannot be converted to protocol</li></ul></li>",1)),i("li",null,[e[53]||(e[53]=i("p",null,"RTMP[S]",-1)),i("ul",null,[e[45]||(e[45]=i("li",null,"RTMP[S] playback server, supports RTSP/MP4/HLS to RTMP conversion",-1)),e[46]||(e[46]=i("li",null,"RTMP[S] publishing server, supports recording and publishing streams",-1)),e[47]||(e[47]=i("li",null,"RTMP[S] player, supports RTMP proxy, supports generating silent audio",-1)),e[48]||(e[48]=i("li",null,"RTMP[S] push client",-1)),e[49]||(e[49]=i("li",null,"Supports http[s]-flv live streaming server",-1)),e[50]||(e[50]=i("li",null,"Supports http[s]-flv live streaming player",-1)),e[51]||(e[51]=i("li",null,"Supports websocket-flv live streaming",-1)),e[52]||(e[52]=i("li",null,"Supports H264/H265/AAC/G711/OPUS encoding. Other encodings can be forwarded but cannot be converted to protocol",-1)),i("li",null,[e[40]||(e[40]=t("Supports ")),i("a",L,[e[39]||(e[39]=t("RTMP-H265")),o(r)])]),i("li",null,[e[42]||(e[42]=t("Supports ")),o(l,{to:"/reference/resources/rtmp_support_for_h265_and_opus.html"},{default:n(()=>e[41]||(e[41]=[t("RTMP-OPUS")])),_:1})]),i("li",null,[e[44]||(e[44]=t("Supports ")),i("a",H,[e[43]||(e[43]=t("enhanced-rtmp(H265)")),o(r)])])])]),e[56]||(e[56]=s("<li><p>HLS</p><ul><li>Supports HLS file(mpegts/fmp4) generation and comes with an HTTP file server</li><li>Through cookie tracking technology, it can simulate HLS playback as a long connection, which can achieve HLS on-demand pulling, playback statistics, and other businesses</li><li>Supports HLS player and can pull HLS to rtsp/rtmp/mp4</li><li>Supports H264/H265/AAC/G711/OPUS encoding</li></ul></li><li><p>TS</p><ul><li>Supports http[s]-ts live streaming</li><li>Supports ws[s]-ts live streaming</li><li>Supports H264/H265/AAC/G711/OPUS encoding</li></ul></li><li><p>fMP4</p><ul><li>Supports http[s]-fmp4 live streaming</li><li>Supports ws[s]-fmp4 live streaming</li><li>Supports H264/H265/AAC/G711/OPUS/MJPEG encoding</li></ul></li><li><p>http[s] and WebSocket</p><ul><li>The server supports <code>directory index generation</code>, <code>file download</code>, <code>form submission requests</code></li><li>The client provides <code>file downloader (supports resume breakpoint)</code>, <code>interface requestor</code>, <code>file uploader</code></li><li>Complete HTTP API server, which can be used as a web backend development framework</li><li>Supports cross-domain access</li><li>Supports http client/server cookie</li><li>Supports WebSocket server and client</li><li>Supports http file access authentication</li></ul></li><li><p>GB28181 and RTP Streaming</p><ul><li>Supports UDP/TCP RTP (PS/TS/ES) streaming server, which can be converted to RTSP/RTMP/HLS and other protocols</li><li>Supports RTSP/RTMP/HLS and other protocol conversion to RTP streaming client, supports TCP/UDP mode, provides corresponding RESTful API, supports active and passive modes</li><li>Supports H264/H265/AAC/G711/OPUS encoding</li><li>Supports ES/PS/TS/EHOME RTP streaming</li><li>Supports ES/PS RTP forwarding</li><li>Supports GB28181 active pull mode</li><li>Supports two-way voice intercom</li></ul></li><li><p>MP4 VOD and Recording</p><ul><li>Supports recording as FLV/HLS/MP4</li><li>Supports MP4 file playback for RTSP/RTMP/HTTP-FLV/WS-FLV, supports seek</li><li>Supports H264/H265/AAC/G711/OPUS encoding</li></ul></li><li><p>WebRTC</p><ul><li>Supports WebRTC streaming and conversion to other protocols</li><li>Supports WebRTC playback and conversion from other protocols to WebRTC</li><li>Supports two-way echo testing</li><li>Supports simulcast streaming</li><li>Supports uplink and downlink RTX/NACK packet loss retransmission</li><li><strong>Supports single-port, multi-threaded, and client network connection migration (unique in the open source community)</strong>.</li><li>Supports TWCC RTCP dynamic rate control</li><li>Supports REMB/PLI/SR/RR RTCP</li><li>Supports RTP extension parsing</li><li>Supports GOP buffer and instant WebRTC playback</li><li>Supports data channels</li><li>Supports WebRTC over TCP mode</li><li>Excellent NACK and jitter buffer algorithms with outstanding packet loss resistance</li><li>Supports WHIP/WHEP protocols</li></ul></li>",7)),i("li",null,[i("p",null,[o(l,{to:"/guide/protocol/srt/"},{default:n(()=>e[54]||(e[54]=[t("SRT support")])),_:1})])]),e[57]||(e[57]=s("<li><p>Others</p><ul><li>Supports rich RESTful APIs and webhook events</li><li>Supports simple Telnet debugging</li><li>Supports hot reloading of configuration files</li><li>Supports traffic statistics, stream authentication, and other events</li><li>Supports virtual hosts for isolating different domain names</li><li>Supports on-demand streaming and automatic shutdown of streams with no viewers</li><li>Supports pre-play before streaming to increase the rate of timely stream openings</li><li>Provides a complete and powerful C API SDK</li><li>Supports FFmpeg stream proxy for any format</li><li>Supports HTTP API for real-time screenshot generation and return</li><li>Supports on-demand demultiplexing and protocol conversion, reducing CPU usage by only enabling it when someone is watching</li><li>Supports cluster deployment in traceable mode, with RTSP/RTMP/HLS/HTTP-TS support for traceable mode and HLS support for edge stations and multiple sources for source stations (using round-robin tracing)</li><li>Can reconnect to streaming after abnormal disconnection in RTSP/RTMP/WebRTC pushing within a timeout period, with no impact on the player.</li></ul></li>",1))]),e[72]||(e[72]=i("h2",{id:"how-to-build",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#how-to-build","aria-hidden":"true"},"#"),t(" How to build")],-1)),i("p",null,[e[59]||(e[59]=t("It is recommended to compile on Ubuntu or macOS. Compiling on Windows is cumbersome, and some features are not compiled by default. ")),o(l,{to:"/tutorial/"},{default:n(()=>e[58]||(e[58]=[t("For details, please refer to Quick Start")])),_:1})]),e[73]||(e[73]=i("h2",{id:"how-to-use",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#how-to-use","aria-hidden":"true"},"#"),t(" How to use")],-1)),e[74]||(e[74]=i("p",null,"You have three ways to use ZLMediaKit, namely:",-1)),i("ul",null,[i("li",null,[i("ol",null,[i("li",null,[e[61]||(e[61]=t("Use c api as sdk, please refer to ")),i("a",x,[e[60]||(e[60]=t("here")),o(r)]),e[62]||(e[62]=t("."))])])]),i("li",null,[i("ol",K,[i("li",null,[e[65]||(e[65]=t("Used as an independent streaming media server. If you don’t want to do c/c++ development, you can refer to ")),o(l,{to:"/guide/media_server/restful_api.html"},{default:n(()=>e[63]||(e[63]=[t("restful api")])),_:1}),e[66]||(e[66]=t(" and ")),o(l,{to:"/guide/media_server/web_hook_api.html"},{default:n(()=>e[64]||(e[64]=[t("web hook")])),_:1}),e[67]||(e[67]=t("."))])])]),e[68]||(e[68]=i("li",null,[i("ol",{start:"3"},[i("li",null,"If you want to do c/c++ development and add business logic to increase functions, you can refer to the [test program] here (https://github.com/ZLMediaKit/ZLMediaKit/tree/master/tests).")])],-1))]),e[75]||(e[75]=s(`<h2 id="docker-image" tabindex="-1"><a class="header-anchor" href="#docker-image" aria-hidden="true">#</a> Docker image</h2><p>You can download the compiled image from Docker Hub and start it:</p><p>This image is automatically compiled and pushed for github continuous integration, keeping it up to date with the code (master branch)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-id</span> <span class="token parameter variable">-p</span> <span class="token number">1935</span>:1935 <span class="token parameter variable">-p</span> <span class="token number">8080</span>:80 <span class="token parameter variable">-p</span> <span class="token number">8443</span>:443 <span class="token parameter variable">-p</span> <span class="token number">8554</span>:554 <span class="token parameter variable">-p</span> <span class="token number">10000</span>:10000 <span class="token parameter variable">-p</span> <span class="token number">10000</span>:10000/udp <span class="token parameter variable">-p</span> <span class="token number">8000</span>:8000/udp <span class="token parameter variable">-p</span> <span class="token number">9000</span>:9000/udp zlmediakit/zlmediakit:master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You can also compile the image according to the Dockerfile:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">bash</span> build_docker_images.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,6))])}const I=d(g,[["render",C],["__file","index.html.vue"]]);export{I as default};
