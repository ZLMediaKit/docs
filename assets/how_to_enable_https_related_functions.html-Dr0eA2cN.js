import{_ as s,a as o,b as l,c as r,d,e as c,f as u,g as p,h as m,i as f}from"./how_to_enable_https_related_functions_zh_10-VbCtxu5k.js";import{_ as g}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as h,o as b,c as v,e as n,a as i,b as a,d as k,w as y}from"./app-CRnFokh3.js";const _={};function x(w,e){const t=h("RouterLink");return b(),v("div",null,[e[6]||(e[6]=n(`<h3 id="i-enable-openssl-feature-during-compilation" tabindex="-1"><a class="header-anchor" href="#i-enable-openssl-feature-during-compilation" aria-hidden="true">#</a> I. Enable OpenSSL Feature during Compilation</h3><p>The HTTPS feature of zlmediakit (including rtmps/rtsps/webrtc/wss) relies on the OpenSSL library. Before compiling zlmediakit, you should first install the OpenSSL library in the default system environment. On Ubuntu, you can install it using the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libssl-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If the default version of OpenSSL on your system is too old, you can choose to compile and install OpenSSL to a custom path. In this case, when compiling zlmediakit, you can specify the custom installation path of OpenSSL using the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ZLMediaKit
<span class="token function">mkdir</span> build
<span class="token builtin class-name">cd</span> build
cmake <span class="token punctuation">..</span> <span class="token parameter variable">-DOPENSSL_ROOT_DIR</span><span class="token operator">=</span>/path/to/your/new/openssl/install/root/dir
<span class="token function">make</span> -j<span class="token variable"><span class="token variable">$(</span>nproc<span class="token variable">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-create-certificates" tabindex="-1"><a class="header-anchor" href="#ii-create-certificates" aria-hidden="true">#</a> II. Create Certificates</h2>`,6)),i("ul",null,[i("li",null,[i("p",null,[e[1]||(e[1]=a("If you haven't purchased a domain name yet, you can use a ")),k(t,{to:"/guide/media_server/generate_ssl_self-signed_certificate_and_test.html"},{default:y(()=>e[0]||(e[0]=[a("self-signed certificate")])),_:1}),e[2]||(e[2]=a(" or the default certificate ")),e[3]||(e[3]=i("code",null,"default.pem",-1)),e[4]||(e[4]=a(" provided by zlmediakit for testing."))])]),e[5]||(e[5]=i("li",null,[i("p",null,"If you have already purchased a domain name, using Alibaba Cloud as an example, you can choose to apply for a free certificate for your domain:**")],-1))]),e[7]||(e[7]=n('<figure><img src="'+s+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><ul><li><strong>After obtaining the free certificate quota, click the &quot;Create Certificate&quot; button and enter your domain name in the pop-up page:</strong></li></ul><figure><img src="'+o+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><ul><li><strong>Click &quot;Next&quot; to submit the application for review:</strong></li></ul><figure><img src="'+l+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h2 id="iii-download-and-merge-certificates-into-the-supported-format-by-zlmediakit" tabindex="-1"><a class="header-anchor" href="#iii-download-and-merge-certificates-into-the-supported-format-by-zlmediakit" aria-hidden="true">#</a> III. Download and Merge Certificates into the Supported Format by zlmediakit:</h2><ul><li><strong>Download the certificates:</strong></li></ul><figure><img src="'+r+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><ul><li><strong>Choose to download either nginx or other methods (both have the same certificate format):</strong></li></ul><figure><img src="'+d+`" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><ul><li><strong>After extracting the downloaded compressed file, the files are as follows</strong>：</li></ul><figure><img src="https://user-images.githubusercontent.com/11495632/191884186-3c09f0ed-0042-417c-a8dc-ad87c4c0c1ed.png" alt="图片" width="760" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><ul><li>The files with the &quot;.key&quot; extension are private keys, and the files with the &quot;.pem&quot; extension are public keys. Both can be opened with a text editor. They are base64-encoded strings. After concatenating the two strings together, you will get the certificate file format supported by zlmediakit:</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Enter the folder</span>
<span class="token builtin class-name">cd</span> 8516590_test.zlmediakit.com_nginx
<span class="token comment"># Merge the public and private keys</span>
<span class="token function">cat</span> 8516590_test.zlmediakit.com.key 8516590_test.zlmediakit.com.pem <span class="token operator">&gt;</span> default.pem
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iv-load-certificates-in-zlmediakit" tabindex="-1"><a class="header-anchor" href="#iv-load-certificates-in-zlmediakit" aria-hidden="true">#</a> IV. Load Certificates in zlmediakit</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Go to the binary directory of zlmediakit after compilation (different paths for different platforms)</span>
<span class="token builtin class-name">cd</span> ~/git/ZLMediaKit/release/darwin/Debug/

<span class="token comment"># Copy the merged certificate over</span>
<span class="token function">cp</span> ~/Downloads/8516590_test.zlmediakit.com_nginx/default.pem ./

<span class="token comment"># Start the process</span>
./MediaServer <span class="token parameter variable">-s</span> default.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+c+`" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h2 id="v-testing" tabindex="-1"><a class="header-anchor" href="#v-testing" aria-hidden="true">#</a> V. Testing</h2><ul><li>If the IP address of your development machine does not map to the IP address bound to the certificate domain, you can modify the host file to perform the test. Here is an example for Linux/Mac：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Open the host file</span>
<span class="token function">sudo</span> <span class="token function">vi</span> /etc/hosts
<span class="token comment"># Add the following line (your machine&#39;s IP + a space + your domain name)</span>
<span class="token number">127.0</span>.0.1  test.zlmediakit.com
<span class="token comment"># Save and exit vi after making the modification</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Open the browser and enter the HTTPS address for testing:</strong></li></ul><figure><img src="`+u+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><ul><li><strong>View the certificate:</strong></li></ul><figure><img src="'+p+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h2 id="vi-deploying-in-a-production-environment" tabindex="-1"><a class="header-anchor" href="#vi-deploying-in-a-production-environment" aria-hidden="true">#</a> VI. Deploying in a Production Environment</h2><ul><li>After completing all the previous steps and passing the verification, you can proceed to deploy the application in a production environment. To do this, you need to bind the certificate domain name to the real public IP address of your cloud host:</li></ul><figure><img src="'+m+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><figure><img src="'+f+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure>',28))])}const C=g(_,[["render",x],["__file","how_to_enable_https_related_functions.html.vue"]]);export{C as default};
