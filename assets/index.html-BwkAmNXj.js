import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,c as u,o as m,a as i,b as o,d as t,e,w as s}from"./app-D6CC-_aF.js";const b={},g={href:"https://github.com/ZLMediaKit/ZLMediaKit/blob/master/LICENSE",target:"_blank",rel:"noopener noreferrer"},f={href:"https://en.cppreference.com/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/ZLMediaKit/ZLMediaKit",target:"_blank",rel:"noopener noreferrer"},M={href:"https://github.com/ZLMediaKit/ZLMediaKit/pulls",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/ZLMediaKit/ZLMediaKit",target:"_blank",rel:"noopener noreferrer"},T={href:"https://github.com/ZLMediaKit/ZLMediaKit",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/ZLMediaKit/ZLMediaKit",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com/ZLMediaKit/ZLMediaKit",target:"_blank",rel:"noopener noreferrer"},v={href:"https://hub.docker.com/r/zlmediakit/zlmediakit/tags",target:"_blank",rel:"noopener noreferrer"},R={href:"https://hub.docker.com/r/zlmediakit/zlmediakit/tags",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/ZLMediaKit/ZLMediaKit/tree/master/api/include",target:"_blank",rel:"noopener noreferrer"},H={href:"https://github.com/ZLMediaKit/ZLMediaKit/tree/master/server",target:"_blank",rel:"noopener noreferrer"},K={href:"https://github.com/ZLMediaKit/ZLMediaKit/issues/511",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://github.com/ksvc/FFmpeg/wiki",target:"_blank",rel:"noopener noreferrer"},z={href:"https://github.com/veovera/enhanced-rtmp",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/ZLMediaKit/ZLMediaKit/tree/master/api/include",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/ZLMediaKit/ZLMediaKit/tree/master/tests",target:"_blank",rel:"noopener noreferrer"};function C(A,l){const r=a("ExternalLinkIcon"),n=a("RouterLink"),d=a("Mermaid");return m(),u("div",null,[l[71]||(l[71]=i("h2",{id:"一个基于-c-11-的高性能运营级流媒体服务框架",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#一个基于-c-11-的高性能运营级流媒体服务框架","aria-hidden":"true"},"#"),e(" 一个基于 C++11 的高性能运营级流媒体服务框架")],-1)),i("p",null,[i("a",g,[l[0]||(l[0]=i("img",{src:"https://img.shields.io/badge/license-MIT-green.svg",alt:"badge",loading:"lazy"},null,-1)),t(r)]),i("a",f,[l[1]||(l[1]=i("img",{src:"https://img.shields.io/badge/language-c++-red.svg",alt:"badge",loading:"lazy"},null,-1)),t(r)]),i("a",k,[l[2]||(l[2]=i("img",{src:"https://img.shields.io/badge/platform-linux | macos | windows-blue.svg",alt:"badge",loading:"lazy"},null,-1)),t(r)]),i("a",M,[l[3]||(l[3]=i("img",{src:"https://img.shields.io/badge/PRs-welcome-yellow.svg",alt:"badge",loading:"lazy"},null,-1)),t(r)])]),i("p",null,[i("a",S,[l[4]||(l[4]=i("img",{src:"https://github.com/ZLMediaKit/ZLMediaKit/actions/workflows/android.yml/badge.svg",alt:"badge",loading:"lazy"},null,-1)),t(r)]),i("a",T,[l[5]||(l[5]=i("img",{src:"https://github.com/ZLMediaKit/ZLMediaKit/actions/workflows/linux.yml/badge.svg",alt:"badge",loading:"lazy"},null,-1)),t(r)]),i("a",P,[l[6]||(l[6]=i("img",{src:"https://github.com/ZLMediaKit/ZLMediaKit/actions/workflows/macos.yml/badge.svg",alt:"badge",loading:"lazy"},null,-1)),t(r)]),i("a",L,[l[7]||(l[7]=i("img",{src:"https://github.com/ZLMediaKit/ZLMediaKit/actions/workflows/windows.yml/badge.svg",alt:"badge",loading:"lazy"},null,-1)),t(r)])]),i("p",null,[i("a",v,[l[8]||(l[8]=i("img",{src:"https://github.com/ZLMediaKit/ZLMediaKit/actions/workflows/docker.yml/badge.svg",alt:"badge",loading:"lazy"},null,-1)),t(r)]),i("a",R,[l[9]||(l[9]=i("img",{src:"https://img.shields.io/docker/pulls/zlmediakit/zlmediakit",alt:"badge",loading:"lazy"},null,-1)),t(r)])]),l[72]||(l[72]=i("h2",{id:"项目特点",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#项目特点","aria-hidden":"true"},"#"),e(" 项目特点")],-1)),i("ul",null,[l[27]||(l[27]=i("li",null,"基于 C++11 开发，避免使用裸指针，代码稳定可靠，性能优越。",-1)),l[28]||(l[28]=i("li",null,"支持多种协议(RTSP/RTMP/HLS/HTTP-FLV/WebSocket-FLV/GB28181/HTTP-TS/WebSocket-TS/HTTP-fMP4/WebSocket-fMP4/MP4/WebRTC),支持协议互转。",-1)),l[29]||(l[29]=i("li",null,"使用多路复用/多线程/异步网络 IO 模式开发，并发性能优越，支持海量客户端连接。",-1)),l[30]||(l[30]=i("li",null,"代码经过长期大量的稳定性、性能测试，已经在线上商用验证已久。",-1)),l[31]||(l[31]=i("li",null,"支持 linux、macos、ios、android、windows 全平台。",-1)),l[32]||(l[32]=i("li",null,"支持 x86、arm、risc-v、mips、龙芯、申威等指令集平台。",-1)),i("li",null,[l[11]||(l[11]=e("支持画面秒开、极低延时(")),t(n,{to:"/zh/reference/test/delay_test.html"},{default:s(()=>l[10]||(l[10]=[e("500 毫秒内，最低可达 100 毫秒")])),_:1}),l[12]||(l[12]=e(")。"))]),i("li",null,[l[14]||(l[14]=e("提供完善的标准")),i("a",w,[l[13]||(l[13]=e("C API")),t(r)]),l[15]||(l[15]=e(",可以作 SDK 用，或供其他语言调用。"))]),i("li",null,[l[17]||(l[17]=e("提供完整的")),i("a",H,[l[16]||(l[16]=e("MediaServer")),t(r)]),l[18]||(l[18]=e("服务器，可以免开发直接部署为商用服务器。"))]),i("li",null,[l[21]||(l[21]=e("提供完善的")),t(n,{to:"/zh/guide/media_server/restful_api.html"},{default:s(()=>l[19]||(l[19]=[e("restful api")])),_:1}),l[22]||(l[22]=e("以及")),t(n,{to:"/zh/guide/media_server/web_hook_api.html"},{default:s(()=>l[20]||(l[20]=[e("web hook")])),_:1}),l[23]||(l[23]=e("，支持丰富的业务逻辑。"))]),l[33]||(l[33]=i("li",null,"打通了视频监控协议栈与直播协议栈，对 RTSP/RTMP 支持都很完善。",-1)),l[34]||(l[34]=i("li",null,"全面支持 H265/H264/AAC/G711/OPUS。",-1)),l[35]||(l[35]=i("li",null,"功能完善，支持集群、按需转协议、按需推拉流、先播后推、断连续推等功能。",-1)),l[36]||(l[36]=i("li",null,"极致性能，单机 10W 级别播放器，100Gb/s 级别 io 带宽能力。",-1)),i("li",null,[l[25]||(l[25]=e("极致体验，")),t(n,{to:"/zh/reference/documents/exclusive_features.html"},{default:s(()=>l[24]||(l[24]=[e("独家特性")])),_:1})]),i("li",null,[i("a",K,[l[26]||(l[26]=e("谁在使用 zlmediakit?")),t(r)])]),l[37]||(l[37]=i("li",null,"全面支持 ipv6 网络",-1))]),l[73]||(l[73]=o('<h2 id="项目定位" tabindex="-1"><a class="header-anchor" href="#项目定位" aria-hidden="true">#</a> 项目定位</h2><ul><li>移动嵌入式跨平台流媒体解决方案。</li><li>商用级流媒体服务器。</li><li>网络编程二次开发 SDK。</li></ul><h2 id="功能清单" tabindex="-1"><a class="header-anchor" href="#功能清单" aria-hidden="true">#</a> 功能清单</h2><h3 id="功能一览" tabindex="-1"><a class="header-anchor" href="#功能一览" aria-hidden="true">#</a> 功能一览</h3>',4)),t(d,{id:"mermaid-128",code:"eJx1k99PgzAQx9/3V/QRH4jR+GB8MGHQyTKQhnYz2iwLYcyRzLGwTmOc/7vXH9BNGAn0eve5b69H67ruQJRiUzygUZGJQ13sB9K32lRf+TqrBWLBAMHj8ZTFZI5c9/FIpjRESYrINIqOaOiMt3n1UW7f0V7URaasXV2JKq82VzpZZtP+bAN4PGSMuIxeq3EUza7DiDYZZ6RBY3LXDT8Nb+9v7m+4Ge2KDfCChynzuR66YZoyDm83gMMkxlx9u8HxM5myRcJCnPJErIu63b+tEM3GHhqNYoKfmrShDCL/5y2Ki2WZTUrxq/y+9Ac8OYjdQfQ0da6oQGXLMihLsRfzVfawytw8qxE57Nc2z+BAQ8tS7Cdp4ICF6iKv6iUA+idJQLeFRN6ro00TkktF4xk2K0XlZ2H0rTi0TSXCiHab7NuqzpLAgVc7rAxE5Klw5AdJyR4AzsFCOhwwLjFwTjQDhjpAMECf7y7xzOCMXlwVss2y5zq226b4hfSoHfQCcQvEfYA5pZoxE401+25VTiROYvIiLOScOM216TDwI2niTzAzYDu3tOlIIwhTo8fof8CqKcqKNWjbu7Y86WjqA7uLnVSo2ZMSVcIfdihA0w=="}),i("ul",null,[l[54]||(l[54]=o("<li><p>RTSP[S]</p><ul><li>RTSP[S] 服务器，支持 RTMP/MP4/HLS 转 RTSP[S] ,支持亚马逊 echo show 这样的设备</li><li>RTSP[S] 播放器，支持 RTSP 代理，支持生成静音音频</li><li>RTSP[S] 推流客户端与服务器</li><li>支持 <code>rtp over udp</code> <code>rtp over tcp</code> <code>rtp over http</code> <code>rtp组播</code> 四种 RTP 传输方式</li><li>服务器/客户端完整支持 Basic/Digest 方式的登录鉴权，全异步可配置化的鉴权接口</li><li>支持 H265 编码</li><li>服务器支持 RTSP 推流(包括<code>rtp over udp</code> <code>rtp over tcp</code>方式)</li><li>支持 H264/H265/AAC/G711/OPUS/MJPEG 编码，其他编码能转发但不能转协议</li></ul></li>",1)),i("li",null,[l[52]||(l[52]=i("p",null,"RTMP[S]",-1)),i("ul",null,[l[44]||(l[44]=i("li",null,"RTMP[S] 播放服务器，支持 RTSP/MP4/HLS 转 RTMP",-1)),l[45]||(l[45]=i("li",null,"RTMP[S] 发布服务器，支持录制发布流",-1)),l[46]||(l[46]=i("li",null,"RTMP[S] 播放器，支持 RTMP 代理，支持生成静音音频",-1)),l[47]||(l[47]=i("li",null,"RTMP[S] 推流客户端",-1)),l[48]||(l[48]=i("li",null,"支持 http[S] -flv 直播服务器",-1)),l[49]||(l[49]=i("li",null,"支持 http[S] -flv 直播播放器",-1)),l[50]||(l[50]=i("li",null,"支持 websocket-flv 直播",-1)),l[51]||(l[51]=i("li",null,"支持 H264/H265/AAC/G711/OPUS 编码，其他编码能转发但不能转协议",-1)),i("li",null,[l[39]||(l[39]=e("支持")),i("a",Z,[l[38]||(l[38]=e("RTMP-H265")),t(r)])]),i("li",null,[l[41]||(l[41]=e("支持")),t(n,{to:"/zh/reference/resources/rtmp_support_for_h265_and_opus.html"},{default:s(()=>l[40]||(l[40]=[e("RTMP-OPUS")])),_:1})]),i("li",null,[l[43]||(l[43]=e("支持")),i("a",z,[l[42]||(l[42]=e("enhanced-rtmp(H265)")),t(r)])])])]),l[55]||(l[55]=o("<li><p>HLS</p><ul><li>支持 HLS 文件(mpegts/fmp4)生成，自带 HTTP 文件服务器</li><li>通过 cookie 追踪技术，可以模拟 HLS 播放为长连接，可以实现 HLS 按需拉流、播放统计等业务</li><li>支持 HLS 播发器，支持拉流 HLS 转 rtsp/rtmp/mp4</li><li>支持 H264/H265/AAC/G711/OPUS 编码</li></ul></li><li><p>TS</p><ul><li>支持 http[S] -ts 直播</li><li>支持 ws[S] -ts 直播</li><li>支持 H264/H265/AAC/G711/OPUS 编码</li></ul></li><li><p>fMP4</p><ul><li>支持 http[S] -fmp4 直播</li><li>支持 ws[S] -fmp4 直播</li><li>支持 H264/H265/AAC/G711/OPUS/MJPEG 编码</li></ul></li><li><p>HTTP[S] 与 WebSocket</p><ul><li>服务器支持<code>目录索引生成</code>,<code>文件下载</code>,<code>表单提交请求</code></li><li>客户端提供<code>文件下载器(支持断点续传)</code>,<code>接口请求器</code>,<code>文件上传器</code></li><li>完整 HTTP API 服务器，可以作为 web 后台开发框架</li><li>支持跨域访问</li><li>支持 http 客户端、服务器 cookie</li><li>支持 WebSocket 服务器和客户端</li><li>支持 http 文件访问鉴权</li></ul></li><li><p>GB28181 与 RTP 推流</p><ul><li>支持 UDP/TCP RTP(PS/TS/ES)推流服务器，可以转换成 RTSP/RTMP/HLS 等协议</li><li>支持 RTSP/RTMP/HLS 等协议转 rtp 推流客户端，支持 TCP/UDP 模式，提供相应 restful api，支持主动被动方式</li><li>支持 H264/H265/AAC/G711/OPUS 编码</li><li>支持 es/ps/ts/ehome rtp 推流</li><li>支持 es/ps rtp 转推</li><li>支持 GB28181 主动拉流模式</li><li>支持双向语音对讲</li></ul></li><li><p>MP4 点播与录制</p><ul><li>支持录制为 FLV/HLS/MP4</li><li>RTSP/RTMP/HTTP-FLV/WS-FLV 支持 MP4 文件点播，支持 seek</li><li>支持 H264/H265/AAC/G711/OPUS 编码</li></ul></li><li><p>WebRTC</p><ul><li>支持 WebRTC 推流，支持转其他协议</li><li>支持 WebRTC 播放，支持其他协议转 WebRTC</li><li>支持双向 echo test</li><li>支持 simulcast 推流</li><li>支持上下行 rtx/nack 丢包重传</li><li><strong>支持单端口、多线程、客户端网络连接迁移(开源界唯一)</strong>。</li><li>支持 TWCC rtcp 动态调整码率</li><li>支持 remb/pli/sr/rr rtcp</li><li>支持 rtp 扩展解析</li><li>支持 GOP 缓冲，webrtc 播放秒开</li><li>支持 datachannel</li><li>支持 webrtc over tcp 模式</li><li>优秀的 nack、jitter buffer 算法, 抗丢包能力卓越</li><li>支持 whip/whep 协议</li></ul></li>",7)),i("li",null,[i("p",null,[t(n,{to:"/zh/guide/protocol/srt/"},{default:s(()=>l[53]||(l[53]=[e("SRT 支持")])),_:1})])]),l[56]||(l[56]=o("<li><p>其他</p><ul><li>支持丰富的 restful api 以及 web hook 事件</li><li>支持简单的 telnet 调试</li><li>支持配置文件热加载</li><li>支持流量统计、推拉流鉴权等事件</li><li>支持虚拟主机,可以隔离不同域名</li><li>支持按需拉流，无人观看自动关断拉流</li><li>支持先播放后推流，提高及时推流画面打开率</li><li>提供完整强大的 c api sdk</li><li>支持 FFmpeg 拉流代理任意格式的流</li><li>支持 http api 生成并返回实时截图</li><li>支持按需解复用、转协议，当有人观看时才开启转协议，降低 cpu 占用率</li><li>支持溯源模式的集群部署，溯源方式支持 rtsp/rtmp/hls/http-ts, 边沿站支持 hls, 源站支持多个(采用 round robin 方式溯源)</li><li>rtsp/rtmp/webrtc 推流异常断开后，可以在超时时间内重连推流，播放器无感知</li></ul></li>",1))]),l[74]||(l[74]=i("h2",{id:"编译以及测试",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#编译以及测试","aria-hidden":"true"},"#"),e(" 编译以及测试")],-1)),i("p",null,[i("strong",null,[l[58]||(l[58]=e("编译前务必仔细参考 wiki:")),t(n,{to:"/zh/tutorial/"},{default:s(()=>l[57]||(l[57]=[e("快速开始")])),_:1}),l[59]||(l[59]=e("操作!!!"))])]),l[75]||(l[75]=i("h2",{id:"怎么使用",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#怎么使用","aria-hidden":"true"},"#"),e(" 怎么使用")],-1)),l[76]||(l[76]=i("p",null,"你有三种方法使用 ZLMediaKit，分别是：",-1)),i("ul",null,[i("li",null,[l[61]||(l[61]=e("1、使用 c api，作为 sdk 使用，请参考")),i("a",h,[l[60]||(l[60]=e("这里")),t(r)]),l[62]||(l[62]=e("."))]),i("li",null,[l[65]||(l[65]=e("2、作为独立的流媒体服务器使用，不想做 c/c++开发的，可以参考 ")),t(n,{to:"/zh/guide/media_server/restful_api.html"},{default:s(()=>l[63]||(l[63]=[e("restful api")])),_:1}),l[66]||(l[66]=e(" 和 ")),t(n,{to:"/zh/guide/media_server/web_hook_api.html"},{default:s(()=>l[64]||(l[64]=[e("web hook")])),_:1}),l[67]||(l[67]=e("."))]),i("li",null,[l[69]||(l[69]=e("3、如果想做 c/c++开发，添加业务逻辑增加功能，可以参考这里的")),i("a",x,[l[68]||(l[68]=e("测试程序")),t(r)]),l[70]||(l[70]=e("."))])]),l[77]||(l[77]=o(`<h2 id="docker-镜像" tabindex="-1"><a class="header-anchor" href="#docker-镜像" aria-hidden="true">#</a> Docker 镜像</h2><p>你可以从 Docker Hub 下载已经编译好的镜像并启动它：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#此镜像为github持续集成自动编译推送，跟代码(master分支)保持最新状态</span>
<span class="token function">docker</span> run <span class="token parameter variable">-id</span> <span class="token parameter variable">-p</span> <span class="token number">1935</span>:1935 <span class="token parameter variable">-p</span> <span class="token number">8080</span>:80 <span class="token parameter variable">-p</span> <span class="token number">8443</span>:443 <span class="token parameter variable">-p</span> <span class="token number">8554</span>:554 <span class="token parameter variable">-p</span> <span class="token number">10000</span>:10000 <span class="token parameter variable">-p</span> <span class="token number">10000</span>:10000/udp <span class="token parameter variable">-p</span> <span class="token number">8000</span>:8000/udp <span class="token parameter variable">-p</span> <span class="token number">9000</span>:9000/udp zlmediakit/zlmediakit:master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以根据 Dockerfile 编译镜像：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">bash</span> build_docker_images.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5))])}const O=p(b,[["render",C],["__file","index.html.vue"]]);export{O as default};
