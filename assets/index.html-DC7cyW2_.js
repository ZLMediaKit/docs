import{_ as p}from"./vs_code_zh-ICcBOeTO.js";import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as u,c as b,o as v,a as e,f as c,d as t,b as g,e as s,w as i}from"./app-D6CC-_aF.js";const k={},f={class:"hint-container info"},h={href:"https://developer.apple.com/xcode/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://visualstudio.microsoft.com/vs/community/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/Kitware/CMake/releases/download/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://blog.51cto.com/mengix/2452395",target:"_blank",rel:"noopener noreferrer"},A={href:"https://slproweb.com/products/Win32OpenSSL.html",target:"_blank",rel:"noopener noreferrer"},S={class:"hint-container info"};function L(O,n){const o=u("RouterLink"),d=u("ExternalLinkIcon"),r=u("Tabs");return v(),b("div",null,[n[84]||(n[84]=e("p",null,"This tutorial will guide you compiling and running ZLMediaKit.",-1)),c(" more "),n[85]||(n[85]=e("h2",{id:"build-environment",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#build-environment","aria-hidden":"true"},"#"),s(" Build Environment")],-1)),n[86]||(n[86]=e("div",{class:"hint-container tip"},[e("p",{class:"hint-container-title"},"Beginner Notice"),e("p",null,"If you're a beginner, we highly recommend compiling ZLMediaKit using Ubuntu16 or later versions. macOS is the second recommended platform. We don't recommend using CentOS6.x or Windows.")],-1)),e("div",f,[n[3]||(n[3]=e("p",{class:"hint-container-title"},"vcpkg",-1)),e("p",null,[n[1]||(n[1]=s("ZLMediaKit has been launched on vcpkg, please refer to ")),t(o,{to:"/guide/install/install_zlmediakit_using_vcpkg.html"},{default:i(()=>n[0]||(n[0]=[s("install zlmediakit using vcpkg")])),_:1}),n[2]||(n[2]=s(" for convenient installation."))])]),n[87]||(n[87]=e("h3",{id:"compiler-supporting-c-11",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#compiler-supporting-c-11","aria-hidden":"true"},"#"),s(" Compiler Supporting C++11")],-1)),n[88]||(n[88]=e("p",null,"ZLMediaKit uses C++11 syntax and libraries, hence, it's required that your compiler fully supports the C++11 standard. This means:",-1)),n[89]||(n[89]=e("ul",null,[e("li",null,"On Linux, gcc version >= 4.8 (4.7 should also be supported)"),e("li",null,"On macOS, clang >= ??? (it's uncertain, but most likely won't encounter any issues)"),e("li",null,"On Windows, Visual Studio >= 2015 (some versions of VS2013 can also compile, but for a smoother experience, VS2017 is recommended)")],-1)),t(r,{id:"40",data:[{id:"Debian-based (including Ubuntu)"},{id:"CentOS7+"},{id:"CentOS 6.x"},{id:"macOS"},{id:"Windows"}],"tab-id":"env"},{title0:i(({value:a,isActive:l})=>n[4]||(n[4]=[s("Debian-based (including Ubuntu)")])),title1:i(({value:a,isActive:l})=>n[5]||(n[5]=[s("CentOS7+")])),title2:i(({value:a,isActive:l})=>n[6]||(n[6]=[s("CentOS 6.x")])),title3:i(({value:a,isActive:l})=>n[7]||(n[7]=[s("macOS")])),title4:i(({value:a,isActive:l})=>n[8]||(n[8]=[s("Windows")])),tab0:i(({value:a,isActive:l})=>n[9]||(n[9]=[e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"sudo"),s(),e("span",{class:"token function"},"apt"),s(),e("span",{class:"token function"},"install"),s(` build-essential
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1)])),tab1:i(({value:a,isActive:l})=>n[10]||(n[10]=[e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"sudo"),s(" yum "),e("span",{class:"token parameter variable"},"-y"),s(),e("span",{class:"token function"},"install"),s(` gcc
`),e("span",{class:"token function"},"sudo"),s(" yum "),e("span",{class:"token parameter variable"},"-y"),s(),e("span",{class:"token function"},"install"),s(` gcc-c++
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1)])),tab2:i(({value:a,isActive:l})=>n[11]||(n[11]=[e("p",null,"You need to manually switch to a higher version of gcc.",-1),e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"sudo"),s(" yum "),e("span",{class:"token function"},"install"),s(" centos-release-scl "),e("span",{class:"token parameter variable"},"-y"),s(`
`),e("span",{class:"token function"},"sudo"),s(" yum "),e("span",{class:"token function"},"install"),s(" devtoolset-4-toolchain "),e("span",{class:"token parameter variable"},"-y"),s(`
`),e("span",{class:"token comment"},"# Switch to a higher version gcc"),s(`
scl `),e("span",{class:"token builtin class-name"},"enable"),s(" devtoolset-4 "),e("span",{class:"token function"},"bash"),s(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1)])),tab3:i(({value:a,isActive:l})=>[e("p",null,[e("a",h,[n[12]||(n[12]=s("Install the latest Xcode")),t(d)]),n[13]||(n[13]=s("."))])]),tab4:i(({value:a,isActive:l})=>[e("p",null,[e("a",w,[n[14]||(n[14]=s("Install latest Visual Studio Community")),t(d)]),n[15]||(n[15]=s(" and ")),n[16]||(n[16]=e("strong",null,"click C++ env",-1)),n[17]||(n[17]=s("."))])]),_:1}),n[90]||(n[90]=e("h3",{id:"cmake",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#cmake","aria-hidden":"true"},"#"),s(" CMake")],-1)),n[91]||(n[91]=e("p",null,"ZLMediaKit uses CMake to build the project, so you need CMake to compile.",-1)),t(r,{id:"70",data:[{id:"Debian-based (including Ubuntu)"},{id:"CentOS7+"},{id:"CentOS 6.x"},{id:"macOS"},{id:"Windows"}],"tab-id":"env"},{title0:i(({value:a,isActive:l})=>n[18]||(n[18]=[s("Debian-based (including Ubuntu)")])),title1:i(({value:a,isActive:l})=>n[19]||(n[19]=[s("CentOS7+")])),title2:i(({value:a,isActive:l})=>n[20]||(n[20]=[s("CentOS 6.x")])),title3:i(({value:a,isActive:l})=>n[21]||(n[21]=[s("macOS")])),title4:i(({value:a,isActive:l})=>n[22]||(n[22]=[s("Windows")])),tab0:i(({value:a,isActive:l})=>n[23]||(n[23]=[e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"sudo"),s(),e("span",{class:"token function"},"apt"),s(),e("span",{class:"token function"},"install"),s(` cmake
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1)])),tab1:i(({value:a,isActive:l})=>n[24]||(n[24]=[e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"sudo"),s(" yum "),e("span",{class:"token parameter variable"},"-y"),s(),e("span",{class:"token function"},"install"),s(` cmake
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1)])),tab2:i(({value:a,isActive:l})=>n[25]||(n[25]=[e("p",null,"You need to manually switch to a higher version of CMake.",-1),e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"wget"),s(` https://github.com/Kitware/CMake/releases/download/v3.17.0-rc3/cmake-3.17.0-rc3.tar.gz
`),e("span",{class:"token function"},"tar"),s(),e("span",{class:"token parameter variable"},"-xvf"),s(` cmake-3.17.0-rc3.tar.gz
`),e("span",{class:"token builtin class-name"},"cd"),s(` cmake-3.17.0-rc3
./configure
`),e("span",{class:"token function"},"make"),s(),e("span",{class:"token parameter variable"},"-j4"),s(`
`),e("span",{class:"token function"},"sudo"),s(),e("span",{class:"token function"},"make"),s(),e("span",{class:"token function"},"install"),s(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1)])),tab3:i(({value:a,isActive:l})=>n[26]||(n[26]=[e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[s("brew "),e("span",{class:"token function"},"install"),s(` cmake
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1)])),tab4:i(({value:a,isActive:l})=>[e("ul",null,[n[29]||(n[29]=e("li",null,"If using vs2017+, vs already includes cmake, you just need to tick it during installation.",-1)),e("li",null,[n[28]||(n[28]=s("Otherwise, you need to ")),e("a",y,[n[27]||(n[27]=s("download and install cmake-gui")),t(d)])])])]),_:1}),n[92]||(n[92]=g(`<h2 id="obtain-source-code" tabindex="-1"><a class="header-anchor" href="#obtain-source-code" aria-hidden="true">#</a> Obtain Source Code</h2><p>Use git to clone the ZLMediaKit source code and its submodules:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone <span class="token parameter variable">--depth</span> <span class="token number">1</span> https://github.com/ZLMediaKit/ZLMediaKit
<span class="token builtin class-name">cd</span> ZLMediaKit
<span class="token comment"># Init submodules (Required)</span>
<span class="token function">git</span> submodule update <span class="token parameter variable">--init</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Do NOT download the source code with zip directly from GitHub. ZLMediaKit is relaying on multiple third-party project codes and manages them with git submodules.</p></div><h3 id="_3rd-party-dependencies" tabindex="-1"><a class="header-anchor" href="#_3rd-party-dependencies" aria-hidden="true">#</a> 3rd party Dependencies</h3><p>ZLMediaKit depends on some optional third-party libraries. During the building of ZLMediaKit, cmake can search for these libraries in the system path and enable relevant features based on their installation status.</p><ul><li><p>openssl</p><p>You need to install the openssl library before compiling to use related features.</p><ul><li>Playing rtmp with flash player</li><li>https/rtsps/webrtc related features</li></ul></li><li><p>ffmpeg</p><p>ZLMediaKit can support multiple protocols for pulling streams by forking ffmpeg as a subprocess. FFmpeg does not need to be installed during compilation.</p></li><li><p>sdl, avcodec, avutil</p><p>These three libraries are used by the test_player test program of ZLMediaKit. You usually do not need to install these three libraries.</p></li></ul>`,7)),t(r,{id:"157",data:[{id:"Debian-based (including Ubuntu)"},{id:"CentOS7+"},{id:"CentOS 6.x"},{id:"macOS"},{id:"Windows"}],"tab-id":"env"},{title0:i(({value:a,isActive:l})=>n[30]||(n[30]=[s("Debian-based (including Ubuntu)")])),title1:i(({value:a,isActive:l})=>n[31]||(n[31]=[s("CentOS7+")])),title2:i(({value:a,isActive:l})=>n[32]||(n[32]=[s("CentOS 6.x")])),title3:i(({value:a,isActive:l})=>n[33]||(n[33]=[s("macOS")])),title4:i(({value:a,isActive:l})=>n[34]||(n[34]=[s("Windows")])),tab0:i(({value:a,isActive:l})=>n[35]||(n[35]=[e("p",null,"Except openssl, others are optional:",-1),e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"sudo"),s(),e("span",{class:"token function"},"apt"),s(),e("span",{class:"token function"},"install"),s(` libssl-dev
`),e("span",{class:"token function"},"sudo"),s(),e("span",{class:"token function"},"apt"),s(),e("span",{class:"token function"},"install"),s(` libsdl-dev
`),e("span",{class:"token function"},"sudo"),s(),e("span",{class:"token function"},"apt"),s(),e("span",{class:"token function"},"install"),s(` libavcodec-dev
`),e("span",{class:"token function"},"sudo"),s(),e("span",{class:"token function"},"apt"),s(),e("span",{class:"token function"},"install"),s(` libavutil-dev
`),e("span",{class:"token function"},"sudo"),s(),e("span",{class:"token function"},"apt"),s(),e("span",{class:"token function"},"install"),s(` ffmpeg
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1)])),tab1:i(({value:a,isActive:l})=>n[36]||(n[36]=[e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"sudo"),s(" yum "),e("span",{class:"token function"},"install"),s(` libssl-dev
`),e("span",{class:"token function"},"sudo"),s(" yum "),e("span",{class:"token function"},"install"),s(` libsdl-dev
`),e("span",{class:"token function"},"sudo"),s(" yum "),e("span",{class:"token function"},"install"),s(` libavcodec-dev
`),e("span",{class:"token function"},"sudo"),s(" yum "),e("span",{class:"token function"},"install"),s(` libavutil-dev
`),e("span",{class:"token function"},"sudo"),s(" yum "),e("span",{class:"token function"},"install"),s(` ffmpeg
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1)])),tab2:i(({value:a,isActive:l})=>[e("p",null,[n[38]||(n[38]=s("Refer to ")),e("a",x,[n[37]||(n[37]=s("blog post")),t(d)]),n[39]||(n[39]=s("。"))])]),tab3:i(({value:a,isActive:l})=>n[40]||(n[40]=[e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"sudo"),s(" brew "),e("span",{class:"token function"},"install"),s(` libssl-dev
`),e("span",{class:"token function"},"sudo"),s(" brew "),e("span",{class:"token function"},"install"),s(` libsdl-dev
`),e("span",{class:"token function"},"sudo"),s(" brew "),e("span",{class:"token function"},"install"),s(` libavcodec-dev
`),e("span",{class:"token function"},"sudo"),s(" brew "),e("span",{class:"token function"},"install"),s(` libavutil-dev
`),e("span",{class:"token function"},"sudo"),s(" brew "),e("span",{class:"token function"},"install"),s(` ffmpeg
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1)])),tab4:i(({value:a,isActive:l})=>[e("p",null,[e("a",A,[n[41]||(n[41]=s("Install and download openssl")),t(d)]),n[42]||(n[42]=s("。"))])]),_:1}),n[93]||(n[93]=e("h2",{id:"building-and-compiling-zlmediakit",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#building-and-compiling-zlmediakit","aria-hidden":"true"},"#"),s(" Building and Compiling ZLMediaKit")],-1)),e("div",S,[n[48]||(n[48]=e("p",{class:"hint-container-title"},"webrtc",-1)),e("p",null,[n[44]||(n[44]=s("由于功能复杂，默认情况下不开启编译 webrtc，可参考 ")),t(o,{to:"/guide/protocol/webrtc/webrtc_compilation_and_use.html"},{default:i(()=>n[43]||(n[43]=[s("编译与使用 webrtc")])),_:1})]),e("p",null,[n[46]||(n[46]=s("Because of complex, the webrtc compilation is not enabled by default. Please refer to ")),t(o,{to:"/guide/protocol/webrtc/webrtc_compilation_and_use.html"},{default:i(()=>n[45]||(n[45]=[s("compilation and usage of webrtc")])),_:1}),n[47]||(n[47]=s("."))])]),t(r,{id:"192",data:[{id:"Linux"},{id:"macOS"},{id:"Windows"},{id:"Android"},{id:"iOS"}],"tab-id":"env"},{title0:i(({value:a,isActive:l})=>n[49]||(n[49]=[s("Linux")])),title1:i(({value:a,isActive:l})=>n[50]||(n[50]=[s("macOS")])),title2:i(({value:a,isActive:l})=>n[51]||(n[51]=[s("Windows")])),title3:i(({value:a,isActive:l})=>n[52]||(n[52]=[s("Android")])),title4:i(({value:a,isActive:l})=>n[53]||(n[53]=[s("iOS")])),tab0:i(({value:a,isActive:l})=>n[54]||(n[54]=[e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token builtin class-name"},"cd"),s(` ZLMediaKit
`),e("span",{class:"token function"},"mkdir"),s(` build
`),e("span",{class:"token builtin class-name"},"cd"),s(` build
cmake `),e("span",{class:"token punctuation"},".."),s(`
`),e("span",{class:"token function"},"make"),s(),e("span",{class:"token parameter variable"},"-j4"),s(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1)])),tab1:i(({value:a,isActive:l})=>n[55]||(n[55]=[e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token builtin class-name"},"cd"),s(` ZLMediaKit
`),e("span",{class:"token function"},"mkdir"),s(` build
`),e("span",{class:"token builtin class-name"},"cd"),s(` build
`),e("span",{class:"token comment"},"# Point DOPENSSL_ROOT_DIR to your openssl path"),s(`
cmake `),e("span",{class:"token punctuation"},".."),s(),e("span",{class:"token parameter variable"},"-DOPENSSL_ROOT_DIR"),e("span",{class:"token operator"},"="),s(`/usr/local/Cellar/openssl/1.0.2j/
`),e("span",{class:"token function"},"make"),s(),e("span",{class:"token parameter variable"},"-j4"),s(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1)])),tab2:i(({value:a,isActive:l})=>[n[59]||(n[59]=e("ul",null,[e("li",null,[e("p",null,[s("If you are using VS2017 or above, you can directly open the project folder from the VS navbar with "),e("code",null,"File"),s(" -> "),e("code",null,"Open"),s(" -> "),e("code",null,"Folder"),s(" -> "),e("code",null,"Select ZLMediaKit code root directory and open"),s(".")]),e("figure",null,[e("img",{src:p,alt:"image",tabindex:"0",loading:"lazy"}),e("figcaption",null,"image")])]),e("li",null,[e("p",null,"Otherwise, you should:"),e("ol",null,[e("li",null,"Use cmake-gui to open the project and generate the vs project file."),e("li",null,"Find the project file (ZLMediaKit.sln) and double-click it to open with vs2017."),e("li",null,"Choose to compile the Release version."),e("li",null,"Locate the target file and run the test case.")])])],-1)),e("p",null,[n[57]||(n[57]=s("For further details, refer to ")),t(o,{to:"/guide/install/compilation_instructions_for_windows_version.html"},{default:i(()=>n[56]||(n[56]=[s("Windows compilation")])),_:1}),n[58]||(n[58]=s("."))])]),tab3:i(({value:a,isActive:l})=>n[60]||(n[60]=[e("p",null,"Open the Android directory in Android Studio.",-1)])),tab4:i(({value:a,isActive:l})=>n[61]||(n[61]=[e("p",null,"Generate XCode project and then compile the C API static library.",-1),e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token builtin class-name"},"cd"),s(` ZLMediaKit
`),e("span",{class:"token function"},"mkdir"),s(),e("span",{class:"token parameter variable"},"-p"),s(` build
`),e("span",{class:"token builtin class-name"},"cd"),s(` build
`),e("span",{class:"token comment"},"# Generate the Xcode project, the project file is in the build directory"),s(`
cmake `),e("span",{class:"token punctuation"},".."),s(),e("span",{class:"token parameter variable"},"-G"),s(" Xcode "),e("span",{class:"token parameter variable"},"-DCMAKE_TOOLCHAIN_FILE"),e("span",{class:"token operator"},"="),e("span",{class:"token punctuation"},".."),s("/cmake/ios.toolchain.cmake  "),e("span",{class:"token parameter variable"},"-DPLATFORM"),e("span",{class:"token operator"},"="),s(`OS64COMBINED
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1)])),_:1}),n[94]||(n[94]=e("h2",{id:"run-zlmediakit",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#run-zlmediakit","aria-hidden":"true"},"#"),s(" Run ZLMediaKit")],-1)),n[95]||(n[95]=e("p",null,"The ZLMediaKit project mainly generates three types of binary target files, which are located in release directory.",-1)),n[96]||(n[96]=e("h3",{id:"mediaserver-process",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#mediaserver-process","aria-hidden":"true"},"#"),s(" MediaServer Process")],-1)),n[97]||(n[97]=e("p",null,"This is the main process of ZLMediaKit as a server. This process can be used directly as a streaming media server for testing without any development.",-1)),e("p",null,[n[65]||(n[65]=s("If you need more complex business logic, you can implement it through ")),t(o,{to:"/guide/media_server/web_hook_api.html"},{default:i(()=>n[62]||(n[62]=[s("Web HOOK")])),_:1}),n[66]||(n[66]=s(" and ")),t(o,{to:"/guide/media_server/restful_api.html"},{default:i(()=>n[63]||(n[63]=[s("RESTful API")])),_:1}),n[67]||(n[67]=s(". At the same time, you can control its parameters through the ")),t(o,{to:"/guide/media_server/config_file.html"},{default:i(()=>n[64]||(n[64]=[s("configuration file")])),_:1}),n[68]||(n[68]=s("."))]),t(r,{id:"268",data:[{id:"Linux"},{id:"macOS"},{id:"Windows"}],"tab-id":"env"},{title0:i(({value:a,isActive:l})=>n[69]||(n[69]=[s("Linux")])),title1:i(({value:a,isActive:l})=>n[70]||(n[70]=[s("macOS")])),title2:i(({value:a,isActive:l})=>n[71]||(n[71]=[s("Windows")])),tab0:i(({value:a,isActive:l})=>n[72]||(n[72]=[e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token builtin class-name"},"cd"),s(` ZLMediaKit/release/linux/Debug
`),e("span",{class:"token comment"},"# Learn startup parameters with -h"),s(`
./MediaServer `),e("span",{class:"token parameter variable"},"-h"),s(`
`),e("span",{class:"token comment"},"# Start in daemon mode"),s(`
./MediaServer `),e("span",{class:"token parameter variable"},"-d"),s(),e("span",{class:"token operator"},"&"),s(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1)])),tab1:i(({value:a,isActive:l})=>n[73]||(n[73]=[e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token builtin class-name"},"cd"),s(` ZLMediaKit/release/mac/Debug
`),e("span",{class:"token comment"},"# Learn startup parameters with -h"),s(`
./MediaServer `),e("span",{class:"token parameter variable"},"-h"),s(`
`),e("span",{class:"token comment"},"# Start in daemon mode"),s(`
./MediaServer `),e("span",{class:"token parameter variable"},"-d"),s(),e("span",{class:"token operator"},"&"),s(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1)])),tab2:i(({value:a,isActive:l})=>n[74]||(n[74]=[e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token builtin class-name"},"cd"),s(` ZLMediaKit/release/windows/Debug
`),e("span",{class:"token comment"},"# Learn startup parameters with -h"),s(`
./MediaServer `),e("span",{class:"token parameter variable"},"-h"),s(`
`),e("span",{class:"token comment"},"# Start in daemon mode"),s(`
./MediaServer `),e("span",{class:"token parameter variable"},"-d"),s(),e("span",{class:"token operator"},"&"),s(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1)])),_:1}),n[98]||(n[98]=e("h3",{id:"c-api-sdk",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#c-api-sdk","aria-hidden":"true"},"#"),s(" C API SDK")],-1)),n[99]||(n[99]=e("p",null,"ZLMediaKit also provides a C language-based API SDK library for further development.",-1)),n[100]||(n[100]=e("p",null,[s("The header file is located at "),e("code",null,"ZLMediaKit/api/include"),s(" with detailed comments, could be generally sufficient for further development.")],-1)),n[101]||(n[101]=e("p",null,"Lib files:",-1)),t(r,{id:"291",data:[{id:"Linux"},{id:"macOS"},{id:"Windows"}],"tab-id":"env"},{title0:i(({value:a,isActive:l})=>n[75]||(n[75]=[s("Linux")])),title1:i(({value:a,isActive:l})=>n[76]||(n[76]=[s("macOS")])),title2:i(({value:a,isActive:l})=>n[77]||(n[77]=[s("Windows")])),tab0:i(({value:a,isActive:l})=>n[78]||(n[78]=[e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,`ZLMediaKit/release/linux/Debug/libmk_api.so
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1)])),tab1:i(({value:a,isActive:l})=>n[79]||(n[79]=[e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,`ZLMediaKit/release/linux/mac/libmk_api.dylib
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1)])),tab2:i(({value:a,isActive:l})=>n[80]||(n[80]=[e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,`ZLMediaKit/release/windows/Debug/mk_api.dll
ZLMediaKit/release/windows/Debug/mk_api.lib
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1)])),_:1}),n[102]||(n[102]=e("h3",{id:"test-programs-starting-with-test",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#test-programs-starting-with-test","aria-hidden":"true"},"#"),s(" Test programs starting with "),e("code",null,"test_")],-1)),n[103]||(n[103]=e("p",null,[s("Related codes are under "),e("code",null,"ZLMediaKit/tests"),s(" directory, and you can start the test process by reading codes.")],-1)),n[104]||(n[104]=e("h2",{id:"stream-testing",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#stream-testing","aria-hidden":"true"},"#"),s(" Stream Testing")],-1)),e("p",null,[n[82]||(n[82]=s("Please refer to ")),t(o,{to:"/guide/media_server/push_test.html"},{default:i(()=>n[81]||(n[81]=[s("Stream Test")])),_:1}),n[83]||(n[83]=s("."))])])}const Z=m(k,[["render",L],["__file","index.html.vue"]]);export{Z as default};
