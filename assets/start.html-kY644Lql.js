import{_ as r}from"./vs_code_zh-ICcBOeTO.js";import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as p,a as e,d as a,b as n,w as i,e as t}from"./app-BTtFj0bM.js";const u={},m=t(`<h2 id="_1-obtain-the-source-code" tabindex="-1"><a class="header-anchor" href="#_1-obtain-the-source-code" aria-hidden="true">#</a> 1. Obtain the Source Code</h2><p><strong>Please refrain from downloading the source code in zip package format directly from GitHub</strong>. Instead, you should clone the ZLMediaKit code using git. This is due to ZLMediaKit&#39;s reliance on multiple third-party project codes which are not included in the zip package. Follow these steps to do this:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># It&#39;s recommended for users in China to download from the synchronized mirror site, gitee</span>
<span class="token function">git</span> clone <span class="token parameter variable">--depth</span> <span class="token number">1</span> https://gitee.com/xia-chu/ZLMediaKit
<span class="token builtin class-name">cd</span> ZLMediaKit
<span class="token comment"># Remember to execute this command</span>
<span class="token function">git</span> submodule update <span class="token parameter variable">--init</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-strongly-recommended" tabindex="-1"><a class="header-anchor" href="#_2-strongly-recommended" aria-hidden="true">#</a> 2. Strongly Recommended</h2><p>If you&#39;re a beginner, we highly recommend compiling ZLMediaKit using Ubuntu16 or later versions. macOS is the second recommended platform. The least recommended platforms are CentOS6.* and Windows.</p>`,5),h=t(`<h2 id="_3-compiler" tabindex="-1"><a class="header-anchor" href="#_3-compiler" aria-hidden="true">#</a> 3. Compiler</h2><h3 id="_3-1-compiler-version-requirements" tabindex="-1"><a class="header-anchor" href="#_3-1-compiler-version-requirements" aria-hidden="true">#</a> 3.1. Compiler Version Requirements</h3><p>ZLMediaKit utilizes C++11 syntax and libraries, hence, it&#39;s required that your compiler fully supports the C++11 standard. This means:</p><ul><li>On Linux, gcc version &gt;= 4.8 (4.7 should also be supported)</li><li>On macOS, clang &gt;= ??? (it&#39;s uncertain, but most likely won&#39;t encounter any issues)</li><li>On Windows, Visual Studio &gt;= 2015 (some versions of VS2013 can also compile, but for a smoother experience, VS2017 is recommended)</li></ul><h3 id="_3-2-installing-the-compiler" tabindex="-1"><a class="header-anchor" href="#_3-2-installing-the-compiler" aria-hidden="true">#</a> 3.2. Installing the Compiler</h3><ul><li><p>If you&#39;re using a Debian-based operating system (including Ubuntu), the built-in gcc version is usually recent enough. Here&#39;s how to install the gcc compiler:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>If you&#39;re a CentOS7 or above user, here&#39;s how to install the gcc compiler:</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>sudo yum <span class="token operator">-</span>y install gcc
sudo yum <span class="token operator">-</span>y install gcc<span class="token operator">-</span>c<span class="token operator">++</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>If you&#39;re a CentOS6.* user, you can install the gcc compiler this way:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> centos-release-scl <span class="token parameter variable">-y</span>
<span class="token function">sudo</span> yum <span class="token function">install</span> devtoolset-4-toolchain <span class="token parameter variable">-y</span>
<span class="token comment"># Switch to a higher version gcc</span>
scl <span class="token builtin class-name">enable</span> devtoolset-4 <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>If you&#39;re a macOS user, you can install Xcode directly.</p></li><li><p>If you&#39;re a Windows user, it&#39;s recommended to install VS2017 or later versions.</p></li></ul><h2 id="_4-cmake" tabindex="-1"><a class="header-anchor" href="#_4-cmake" aria-hidden="true">#</a> 4. CMake</h2><p>ZLMediaKit uses CMake to build the project. CMake is needed to generate Makefile (or Xcode/VS project), so you must install CMake to complete the subsequent steps.</p><ul><li><p>If you&#39;re using a Debian-based operating system (including Ubuntu), the built-in cmake version is usually recent enough. Here&#39;s how to install cmake:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> cmake
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>If you&#39;re a CentOS7 or above user, you might be able to install cmake this way:</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>sudo yum <span class="token operator">-</span>y install cmake
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>If you&#39;re a CentOS6.* user, then you need to download the new version of cmake source code and then compile and install cmake:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> https://github.com/Kitware/CMake/releases/download/v3.17.0-rc3/cmake-3.17.0-rc3.tar.gz
<span class="token function">tar</span> <span class="token parameter variable">-xvf</span> cmake-3.17.0-rc3.tar.gz
<span class="token builtin class-name">cd</span> cmake-3.17.0-rc3
./configure
<span class="token function">make</span> <span class="token parameter variable">-j4</span>
<span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>If you&#39;re a macOS user, here&#39;s how you can install cmake:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>brew <span class="token function">install</span> cmake
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>If you&#39;re a Windows user and your Visual Studio version is 2017 or later, you don&#39;t need to install cmake separately. Otherwise, you need to install cmake-gui:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Install win64 version of cmake</span>
https://github.com/Kitware/CMake/releases/download/v3.17.0-rc3/cmake-3.17.0-rc3-win64-x64.zip

<span class="token comment"># Install win32 version of cmake</span>
https://github.com/Kitware/CMake/releases/download/v3.17.0-rc3/cmake-3.17.0-rc3-win32-x86.zip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_5-dependencies" tabindex="-1"><a class="header-anchor" href="#_5-dependencies" aria-hidden="true">#</a> 5. Dependencies</h2><h3 id="_5-1-dependency-list" tabindex="-1"><a class="header-anchor" href="#_5-1-dependency-list" aria-hidden="true">#</a> 5.1 Dependency List</h3><p>Most of the third-party libraries that ZLMediaKit depends on are optional. During the building of ZLMediaKit, cmake can search for these libraries in the system path and enable relevant features based on their installation status. You may choose to install these dependencies to activate associated features:</p><ul><li><p>openssl</p><ul><li><p>Flash player uses complex handshake mode when playing rtmp, and if this library is not installed, flash player will not be able to play rtmp url provided by zlmediakit.</p></li><li><p>At the same time, features such as https/rtsps/webrtc of ZLMediaKit also require openssl to be activated.</p></li></ul></li><li><p>ffmpeg</p><ul><li>ZLMediaKit can support multiple protocols for pulling streams by forking ffmpeg as a subprocess. FFmpeg does not need to be installed during compilation.</li></ul></li><li><p>sdl, avcodec, avutil</p><ul><li>These three libraries are used by the test_player test program of ZLMediaKit. You usually do not need to install these three libraries.</li></ul></li></ul><h3 id="_5-2-installing-dependencies" tabindex="-1"><a class="header-anchor" href="#_5-2-installing-dependencies" aria-hidden="true">#</a> 5.2 Installing Dependencies</h3>`,14),b=t(`<li><p>On Debian systems (including Ubuntu), use the following commands to install dependencies:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Everything but openssl is optional</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libssl-dev
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libsdl-dev
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libavcodec-dev
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libavutil-dev
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ffmpeg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),v={href:"https://blog.51cto.com/mengix/2452395",target:"_blank",rel:"noopener noreferrer"},g=e("li",null,[e("p",null,"To install dependencies on macOS/CentOS:"),e("p",null,"The basic installation is similar to Debian. Replace the installation commands with brew/yum. However, some library names may be different from Debian, please search for relevant information.")],-1),f=e("p",null,"To install dependencies on Windows:",-1),k=e("p",null,"Installing openssl",-1),_={href:"http://slproweb.com/products/Win32OpenSSL.html",target:"_blank",rel:"noopener noreferrer"},y=e("h2",{id:"_6-building-and-compiling-the-project",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_6-building-and-compiling-the-project","aria-hidden":"true"},"#"),a(" 6. Building and Compiling the Project")],-1),w=t(`<ul><li><p>On Linux or macOS systems, you should operate as follows:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ZLMediaKit
<span class="token function">mkdir</span> build
<span class="token builtin class-name">cd</span> build
<span class="token comment"># You may need to specify the openssl path on macOS as follows: cmake .. -DOPENSSL_ROOT_DIR=/usr/local/Cellar/openssl/1.0.2j/</span>
cmake <span class="token punctuation">..</span>
<span class="token function">make</span> <span class="token parameter variable">-j4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>On Windows system:</p><ul><li><p>If you are using VS2017 or above, you can directly open the project folder from the VS menu bar:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>File<span class="token punctuation">]</span> -<span class="token operator">&gt;</span> <span class="token punctuation">[</span>Open<span class="token punctuation">]</span> -<span class="token operator">&gt;</span> <span class="token punctuation">[</span>Folder<span class="token punctuation">]</span> -<span class="token operator">&gt;</span> <span class="token punctuation">[</span>Select ZLMediaKit code root directory and open<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><figure><img src="`+r+`" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><ul><li><p>If you are using VS2017 or earlier, you need to use cmake-gui to generate the VS project and then compile:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">1</span> Enter the ZLMediaKit directory and execute <span class="token function">git</span> submodule update <span class="token parameter variable">--init</span> to download the code of ZLToolKit

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><p>2 Use cmake-gui to open the project and generate the vs project file. 3 Locate the project file (ZLMediaKit.sln), double-click to open with vs2017. 4 Choose to compile the Release version. 5 Locate the target file and run the test case.</p>`,2),x=e("li",null,[e("p",null,"If you want to compile the Android version, you can open the Android directory in Android Studio.")],-1),S={href:"https://www.jianshu.com/p/44c21296add5",target:"_blank",rel:"noopener noreferrer"},L=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ZLMediaKit
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> build
<span class="token builtin class-name">cd</span> build
<span class="token comment"># Generate the Xcode project, the project file is in the build directory</span>
cmake <span class="token punctuation">..</span> <span class="token parameter variable">-G</span> Xcode <span class="token parameter variable">-DCMAKE_TOOLCHAIN_FILE</span><span class="token operator">=</span><span class="token punctuation">..</span>/cmake/ios.toolchain.cmake  <span class="token parameter variable">-DPLATFORM</span><span class="token operator">=</span>OS64COMBINED
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),M=e("h2",{id:"_7-execution",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_7-execution","aria-hidden":"true"},"#"),a(" 7. Execution")],-1),O=e("p",null,"The ZLMediaKit project mainly generates three types of binary target files, which are generated in the release directory. These target files mainly include:",-1),K=e("p",null,"MediaServer Process",-1),I=t(`<ul><li><p>Start on Linux:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ZLMediaKit/release/linux/Debug
<span class="token comment"># You can learn about the startup parameters with -h</span>
./MediaServer <span class="token parameter variable">-h</span>
<span class="token comment"># Start in daemon mode</span>
./MediaServer <span class="token parameter variable">-d</span> <span class="token operator">&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Start on macOS:</p><p>The target file directory is in ZLMediaKit/mac/Debug, and all other operations are the same.</p></li><li><p>Start on Windows:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">1</span> Go to the ZLMediaKit/release/windows/Debug directory
<span class="token number">2</span> Double-click MediaServer to start
<span class="token number">3</span> You can also start <span class="token keyword">in</span> cmd or powershell, and learn about startup parameters through MediaServer <span class="token parameter variable">-h</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,1),C=t(`<li><p>C API SDK</p><p>ZLMediaKit also provides a C language-based API for secondary development of the SDK library. The header file is in <code>ZLMediaKit/api/include</code>. The library files are:</p><ul><li><p>On Linux:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ZLMediaKit/release/linux/Debug/libmk_api.so
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>On macOS:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ZLMediaKit/release/linux/mac/libmk_api.dylib
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>On Windows:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ZLMediaKit/release/windows/Debug/mk_api.dll
ZLMediaKit/release/windows/Debug/mk_api.lib
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>The SDK header file has detailed comments, which are generally sufficient for secondary development.</p></li><li><p>Test programs starting with <code>test_</code></p><p>The related code is in the <code>ZLMediaKit/tests</code> directory, and you can refer to the code to start the test process.</p></li>`,2),Z=e("h2",{id:"_8-testing",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_8-testing","aria-hidden":"true"},"#"),a(" 8. Testing")],-1);function T(D,j){const s=o("RouterLink"),l=o("ExternalLinkIcon");return c(),p("div",null,[m,e("p",null,[a("zlmediakit has been launched on vcpkg, please refer to "),n(s,{to:"/guide/install/install_zlmediakit_using_vcpkg.html"},{default:i(()=>[a("install zlmediakit using vcpkg")]),_:1}),a(" for convenient installation.")]),h,e("ul",null,[b,e("li",null,[e("p",null,[a("Users of centos6.* can refer to this "),e("a",v,[a("article"),n(l)]),a(".")])]),g,e("li",null,[f,e("ul",null,[e("li",null,[k,e("p",null,[a("Please download from this "),e("a",_,[a("website"),n(l)]),a(".")])])])])]),y,e("p",null,[a("The activation of webrtc related features is complex and is not enabled for compilation by default. If you are interested in the webrtc feature of zlmediakit, you can refer to "),n(s,{to:"/guide/protocol/webrtc/webrtc_compilation_and_use.html"},{default:i(()=>[a("here")]),_:1}),a(".")]),w,e("ul",null,[e("li",null,[e("p",null,[a("Also, you can refer to "),n(s,{to:"/guide/install/compilation_instructions_for_windows_version.html"},{default:i(()=>[a("here")]),_:1}),a(" for Windows compilation.")])]),x,e("li",null,[e("p",null,[a("If you want to compile the iOS version, you can generate the Xcode project and then compile the C API static library. In addition, you can refer to this "),e("a",S,[a("document"),n(l)]),a(".")]),L])]),M,O,e("ul",null,[e("li",null,[K,e("p",null,[a("This is the main process of ZLMediaKit as a server. This process can be used directly as a streaming media server for testing without any development. If you need more complex business logic, you can implement it through "),n(s,{to:"/guide/media_server/web_hook_api.html"},{default:i(()=>[a("Web HOOK")]),_:1}),a(" and "),n(s,{to:"/guide/media_server/restful_api.html"},{default:i(()=>[a("RESTful API")]),_:1}),a(". At the same time, you can control its parameters through the "),n(s,{to:"/guide/media_server/config_file.html"},{default:i(()=>[a("configuration file")]),_:1}),a(".")]),I]),C]),Z,e("p",null,[a("Please refer to "),n(s,{to:"/guide/media_server/push_test.html"},{default:i(()=>[a("this article")]),_:1}),a(" to complete the stream push and play test.")])])}const E=d(u,[["render",T],["__file","start.html.vue"]]);export{E as default};
