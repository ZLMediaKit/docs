import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as p,e as t}from"./app-CRnFokh3.js";const e={};function o(i,n){return s(),p("div",null,n[0]||(n[0]=[t(`<h2 id="事情的起因" tabindex="-1"><a class="header-anchor" href="#事情的起因" aria-hidden="true">#</a> 事情的起因</h2><p>北京冬奥会前夕，zlmediakit 的一位用户完成了 iptv 系统的迁移; 由于 zlmediakit 对 hls 的支持比较完善，支持包括鉴权、统计、溯源等独家特性，所以他把之前的老系统都迁移到 zlmediakit 上了。</p><p>但是很不幸，在冬奥会开幕式当天，zlmediakit 并没有承受起考验，当 hls 并发数达到 3000 左右时，zlmediakit 线程负载接近 100%，延时非常高，整个服务器基本不可用：</p><figure><img src="https://upload-images.jianshu.io/upload_images/8409177-8d6b45ad1518b2b2.png?imageMogr2/auto-orient/strip|imageView2/2/w/320" alt="图片.png" tabindex="0" loading="lazy"><figcaption>图片.png</figcaption></figure><h2 id="思考" tabindex="-1"><a class="header-anchor" href="#思考" aria-hidden="true">#</a> 思考</h2><p>zlmediakit 定位是一个通用的流媒体服务器，主要精力聚焦在 rtsp/rtmp 等协议，对 hls 的优化并不够重视，hls 之前在 zlmediakit 里面实现方式跟 http 文件服务器实现方式基本一致，都是通过直接读取文件的方式提供下载。所以当 hls 播放数比较高时，每个用户播放都需要重新从磁盘读取一遍文件，这时文件 io 承压，由于磁盘慢速度的特性，不能承载太高的并发数。</p><p>有些朋友可能会问，如果用内存虚拟磁盘能不能提高性能？答案是能，但是由于内存拷贝带宽也存在上限，所以就算 hls 文件都放在内存目录，每次读取文件也会存在多次 memcopy，性能并不能有太大的飞跃。前面冬奥会直播事故那个案例，就是把 hls 文件放在内存目录，但是也就能承载 2000+并发而已。</p><h2 id="歧途-sendfile" tabindex="-1"><a class="header-anchor" href="#歧途-sendfile" aria-hidden="true">#</a> 歧途： sendfile</h2><p>为了解决 hls 并发瓶颈这个问题，我首先思考到的是<code>sendfile</code>方案。我们知道，<code>nginx</code>作为 http 服务器的标杆，就支持 sendfile 这个特性。很早之前，我就听说过<code>sendfile</code>多牛逼，它支持直接把文件发送到<code>socket fd</code>；而不用通过用户态和内核态的内存互相拷贝，可以大幅提高文件发送的性能。</p><p>我们查看 sendfile 的资料，有如下介绍：</p><figure><img src="https://upload-images.jianshu.io/upload_images/8409177-74226856ef85a257.png?imageMogr2/auto-orient/strip|imageView2/2/w/600" alt="图片.png" tabindex="0" loading="lazy"><figcaption>图片.png</figcaption></figure><p>于是，在事故反馈当日，2022 年春节期间的某天深夜，我在严寒之下光着膀子在 zlmediakit 中把 sendfile 特性实现了一遍： <img src="https://upload-images.jianshu.io/upload_images/8409177-512ca5a1ebd6c0dc.png?imageMogr2/auto-orient/strip|imageView2/2/w/600" alt="图片.png" loading="lazy"></p><p>实现的代码如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//HttpFileBody.cpp</span>
<span class="token keyword">int</span> <span class="token class-name">HttpFileBody</span><span class="token double-colon punctuation">::</span><span class="token function">sendFile</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span>  <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>__linux__<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span><span class="token punctuation">(</span>__linux<span class="token punctuation">)</span></span></span>
    off_t off <span class="token operator">=</span> _file_offset<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">sendfile</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token function">fileno</span><span class="token punctuation">(</span>_fp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>off<span class="token punctuation">,</span> _max_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token comment">//HttpSession.cpp</span>
<span class="token keyword">void</span> <span class="token class-name">HttpSession</span><span class="token double-colon punctuation">::</span><span class="token function">sendResponse</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span>
                               <span class="token keyword">bool</span> bClose<span class="token punctuation">,</span>
                               <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pcContentType<span class="token punctuation">,</span>
                               <span class="token keyword">const</span> HttpSession<span class="token double-colon punctuation">::</span>KeyValue <span class="token operator">&amp;</span>header<span class="token punctuation">,</span>
                               <span class="token keyword">const</span> HttpBody<span class="token double-colon punctuation">::</span>Ptr <span class="token operator">&amp;</span>body<span class="token punctuation">,</span>
                               <span class="token keyword">bool</span> no_content_length <span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//省略大量代码</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeid</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>HttpSession<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>body<span class="token operator">-&gt;</span><span class="token function">sendFile</span><span class="token punctuation">(</span><span class="token function">getSock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">rawFD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//http支持sendfile优化</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">GET_CONFIG</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span><span class="token punctuation">,</span> sendBufSize<span class="token punctuation">,</span> Http<span class="token double-colon punctuation">::</span>kSendBufSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>body<span class="token operator">-&gt;</span><span class="token function">remainSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> sendBufSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//在非https的情况下，通过sendfile优化文件发送性能</span>
        <span class="token function">setSocketFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//发送http body</span>
    AsyncSenderData<span class="token double-colon punctuation">::</span>Ptr data <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>AsyncSenderData<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token function">shared_from_this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> body<span class="token punctuation">,</span> bClose<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getSock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">setOnFlush</span><span class="token punctuation">(</span><span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">AsyncSender</span><span class="token double-colon punctuation">::</span><span class="token function">onSocketFlushed</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">AsyncSender</span><span class="token double-colon punctuation">::</span><span class="token function">onSocketFlushed</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 sendfile 只能直接发送文件明文内容，所以并不适用于需要文件加密的 https 场景；这个优化，https 是无法开启的；很遗憾，这次 hls 事故中，用户恰恰用的就是 https-hls。所以本次优化并没起到实质作用（https 时关闭 sendfile 特性是在用户反馈 tls 解析异常才加上的）。</p><h2 id="优化之旅一-共享-mmap" tabindex="-1"><a class="header-anchor" href="#优化之旅一-共享-mmap" aria-hidden="true">#</a> 优化之旅一：共享 mmap</h2><p>很早之前，zlmediakit 已经支持 mmap 方式发送文件了，但是在本次 hls 直播事故中，并没有发挥太大的作用，原因有以下几点：</p><ul><li><p>1.每个 hls 播放器访问的 ts 文件都是独立的，每访问一次都需要建立一次 mmap 映射，这样导致其实每次都需要内存从文件加载一次文件到内存，并没有减少磁盘 io 压力。</p></li><li><p>2.mmap 映射次数太多，导致内存不足，mmap 映射失败，则会回退为 fread 方式。</p></li><li><p>3.由于 hls m3u8 索引文件是会一直覆盖重写的，而 mmap 在文件长度发送变化时，会触发 SIGBUS 的错误，之前为了修复这个 bug，在访问 m3u8 文件时，zlmediakit 会强制采用 fread 方案。</p></li></ul><p>于是在 sendfile 优化方案失败时，我想到了共享 mmap 方案，其优化思路如下：</p><figure><img src="https://upload-images.jianshu.io/upload_images/8409177-7f703110baa254c5.png?imageMogr2/auto-orient/strip|imageView2/2/w/600" alt="图片.png" tabindex="0" loading="lazy"><figcaption>图片.png</figcaption></figure><p>共享 mmap 方案主要解决以下几个问题：</p><ul><li><p>防止文件多次 mmap 时被多次加载到内存，降低文件 io 压力。</p></li><li><p>防止 mmap 次数太多，导致 mmap 失败回退到 fread 方式。</p></li><li><p>mmap 映射内存在 http 明文传输情况下，直接写 socket 时不用经过内核用户态间的互相拷贝，可以降低内存带宽压力。</p></li></ul><p>于是大概在几天后，我新增了该特性：</p><figure><img src="https://upload-images.jianshu.io/upload_images/8409177-4c1c70521321a923.png?imageMogr2/auto-orient/strip|imageView2/2/w/600" alt="图片.png" tabindex="0" loading="lazy"><figcaption>图片.png</figcaption></figure><p>实现代码逻辑其实比较简单，同时也比较巧妙，通过弱指针全局记录 mmap 实例，在无任何访问时，mmap 自动回收，其代码如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span> <span class="token function">getSharedMmap</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>file_path<span class="token punctuation">,</span> <span class="token keyword">int64_t</span> <span class="token operator">&amp;</span>file_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
        lock_guard<span class="token operator">&lt;</span>mutex<span class="token operator">&gt;</span> <span class="token function">lck</span><span class="token punctuation">(</span>s_mtx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> it <span class="token operator">=</span> s_shared_mmap<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">!=</span> s_shared_mmap<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">auto</span> ret <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>it<span class="token operator">-&gt;</span>second<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//命中mmap缓存</span>
                file_size <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>it<span class="token operator">-&gt;</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//打开文件</span>
    std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>FILE<span class="token operator">&gt;</span> <span class="token function">fp</span><span class="token punctuation">(</span><span class="token function">fopen</span><span class="token punctuation">(</span>file_path<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;rb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>fp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//文件不存在</span>
        file_size <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//获取文件大小</span>
    file_size <span class="token operator">=</span> <span class="token class-name">File</span><span class="token double-colon punctuation">::</span><span class="token function">fileSize</span><span class="token punctuation">(</span>fp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">fileno</span><span class="token punctuation">(</span>fp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        WarnL <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;fileno failed:&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">get_uv_errmsg</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">auto</span> ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> file_size<span class="token punctuation">,</span> PROT_READ<span class="token punctuation">,</span> MAP_SHARED<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> MAP_FAILED<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        WarnL <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;mmap &quot;</span> <span class="token operator">&lt;&lt;</span> file_path <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; failed:&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">get_uv_errmsg</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span> <span class="token function">ret</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> <span class="token punctuation">[</span>file_size<span class="token punctuation">,</span> fp<span class="token punctuation">,</span> file_path<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">munmap</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> file_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">delSharedMmap</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">{</span>
        lock_guard<span class="token operator">&lt;</span>mutex<span class="token operator">&gt;</span> <span class="token function">lck</span><span class="token punctuation">(</span>s_mtx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        s_shared_mmap<span class="token punctuation">[</span>file_path<span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">make_tuple</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> file_size<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过本次优化，zlmediakit 的 hls 服务有比较大的性能提升，性能上限大概提升到了 6K 左右(压测途中还发现拉流压测客户端由于 mktime 函数导致的性能瓶颈问题，在此不展开描述)，但是还是离预期有些差距：</p><figure><img src="https://upload-images.jianshu.io/upload_images/8409177-9c7e706f317ea4c2.png?imageMogr2/auto-orient/strip|imageView2/2/w/400" alt="图片.png" tabindex="0" loading="lazy"><figcaption>图片.png</figcaption></figure><blockquote><p>小插曲: mktime 函数导致拉流压测工具性能受限</p></blockquote><figure><img src="https://upload-images.jianshu.io/upload_images/8409177-d509266a091d97a0.png?imageMogr2/auto-orient/strip|imageView2/2/w/600" alt="图片.png" tabindex="0" loading="lazy"><figcaption>图片.png</figcaption></figure><h2 id="优化之旅二-去除-http-cookie-互斥锁" tabindex="-1"><a class="header-anchor" href="#优化之旅二-去除-http-cookie-互斥锁" aria-hidden="true">#</a> 优化之旅二：去除 http cookie 互斥锁</h2><p>在开启共享 mmap 后，发现性能上升到 6K 并发时，还是上不去；于是我登录服务器使用<code>gdb -p</code>调试进程，通过<code>info threads</code> 查看线程情况，发现大量线程处于阻塞状态，这也就是为什么 zlmediakit 占用 cpu 不高，但是并发却上不去的原因：</p><figure><img src="https://upload-images.jianshu.io/upload_images/8409177-9b9db29311c8440a.png?imageMogr2/auto-orient/strip|imageView2/2/w/600" alt="图片.png" tabindex="0" loading="lazy"><figcaption>图片.png</figcaption></figure><p>为什么这么多线程都处于互斥阻塞状态？zlmediakit 在使用互斥锁时，还是比较注意缩小临界区的，一些复杂耗时的操作一般都会放在临界区之外；经过一番思索，我才恍然大悟，原因是:</p><blockquote><p><strong>压测客户端由于是单进程，共享同一份 hls cookie，在访问 zlmediakit 时，这些分布在不同线程的请求，其 cookie 都相同，导致所有线程同时大规模操作同一个 cookie，而操作 cookie 是要加锁的，于是这些线程疯狂的同时进行锁竞争，虽然不会死锁，但是会花费大量的时间用在锁等待上，导致整体性能降低。</strong></p></blockquote><p>虽然在真实使用场景下，用户 cookie 并不一致，这种几千用户同时访问同一个 cookie 的情况并不会存在，但是为了考虑不影响 hls 性能压测，也为了杜绝一切隐患，针对这个问题，我于是对 http/hls 的 cookie 机制进行了修改，在操作 cookie 时，不再上锁：</p><p><img src="https://upload-images.jianshu.io/upload_images/8409177-ee5230a889b3891b.png?imageMogr2/auto-orient/strip|imageView2/2/w/600" alt="图片.png" loading="lazy"><img src="https://upload-images.jianshu.io/upload_images/8409177-348df864460eaefd.png?imageMogr2/auto-orient/strip|imageView2/2/w/600" alt="图片.png" loading="lazy"></p><p>之前对 cookie 上锁属于过度设计，当时目的主要是为了实现在 cookie 上随意挂载数据。</p><h2 id="优化之旅三-hls-m3u8-文件内存化" tabindex="-1"><a class="header-anchor" href="#优化之旅三-hls-m3u8-文件内存化" aria-hidden="true">#</a> 优化之旅三：hls m3u8 文件内存化</h2><p>经过上面两次优化，zlmediakit 的 hls 并发能力可以达到 8K 了，但是当 hls 播放器个数达到在 8K 左右时，zlmediakit 的 ts 切片下载开始超时，可见系统还是存在性能瓶颈，联想到在优化 cookie 互斥锁时，有线程处于该状态：</p><figure><img src="https://upload-images.jianshu.io/upload_images/8409177-4c4cb2dd76e913ac.png?imageMogr2/auto-orient/strip|imageView2/2/w/700" alt="图片.png" tabindex="0" loading="lazy"><figcaption>图片.png</figcaption></figure><p>所以我严重怀疑原因是 m3u8 文件不能使用 mmap 优化(而是采用 fread 方式)导致的文件 io 性能瓶颈问题，后面通过查看函数调用栈发现，果然是这个原因。</p><p>由于 m3u8 是易变的，使用 mmap 映射时，如果文件长度发生变化，会导致触发 SIGBUS 的信号，查看多方资料，此问题无解。所以最后只剩下通过 m3u8 文件内存化来解决，于是我修好了 m3u8 文件的 http 下载方式，改成直接从内存获取：</p><figure><img src="https://upload-images.jianshu.io/upload_images/8409177-175e50e0c1dbc104.png?imageMogr2/auto-orient/strip|imageView2/2/w/700" alt="图片.png" tabindex="0" loading="lazy"><figcaption>图片.png</figcaption></figure><h2 id="结果-性能爆炸" tabindex="-1"><a class="header-anchor" href="#结果-性能爆炸" aria-hidden="true">#</a> 结果：性能爆炸</h2><p>通过上述总共 3 大优化，我们在压测 zlmediakit 的 hls 性能时，随着一点一点增加并发量，发现 zlmediakit 总是能运行的非常健康，在并发量从 10K 慢慢增加到 30K 时，并不会影响 ffplay 播放的流畅性和效果，以下是压测数据：</p><blockquote><p>压测 16K http-hls 播放器时，流量大概 7.5Gb/s： (大概需要 32K 端口，由于我测试机端口不足，只能最大压测到这个数据)</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/8409177-e4e50b03f39fb67a.png?imageMogr2/auto-orient/strip|imageView2/2/w/600" alt="图片.png" loading="lazy"><img src="https://upload-images.jianshu.io/upload_images/8409177-ac97bc4b78986289.png?imageMogr2/auto-orient/strip|imageView2/2/w/600" alt="图片.png" loading="lazy"><img src="https://upload-images.jianshu.io/upload_images/8409177-2c64d8cd201ecd20.png?imageMogr2/auto-orient/strip|imageView2/2/w/600" alt="图片.png" loading="lazy"></p><blockquote><p>后面用户再压测了 30k https-hls 播放器:</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/8409177-4f0ca1cb2f5df91c.png?imageMogr2/auto-orient/strip|imageView2/2/w/600" alt="图片.png" loading="lazy"><img src="https://upload-images.jianshu.io/upload_images/8409177-1569e4c146dd47b8.png?imageMogr2/auto-orient/strip|imageView2/2/w/400" alt="图片.png" loading="lazy"></p><h2 id="后记-用户切生产环境" tabindex="-1"><a class="header-anchor" href="#后记-用户切生产环境" aria-hidden="true">#</a> 后记：用户切生产环境</h2><p>在完成 hls 性能优化后，该用户把所有北美节点的 hls 流量切到了 zlmediakit，</p><p><img src="https://upload-images.jianshu.io/upload_images/8409177-10a6d17e6236fa48.png?imageMogr2/auto-orient/strip|imageView2/2/w/400" alt="图片.png" loading="lazy"><img src="https://upload-images.jianshu.io/upload_images/8409177-e6d38eda398a2b16.png?imageMogr2/auto-orient/strip|imageView2/2/w/400" alt="图片.png" loading="lazy"></p><h2 id="状况又起" tabindex="-1"><a class="header-anchor" href="#状况又起" aria-hidden="true">#</a> 状况又起:</h2><p>今天该用户又反馈给我说 zlmediakit 的内存占用非常高，在 30K hls 并发时，内存占用 30+GB:</p><figure><img src="https://upload-images.jianshu.io/upload_images/8409177-577fd6cd88b3f0f3.png?imageMogr2/auto-orient/strip|imageView2/2/w/700" alt="图片.png" tabindex="0" loading="lazy"><figcaption>图片.png</figcaption></figure><p>但是用 zlmediakit 的<code>getThreadsLoad</code>接口查看，却发现负载很低：</p><figure><img src="https://upload-images.jianshu.io/upload_images/8409177-9b200e5fb718781b.png?imageMogr2/auto-orient/strip|imageView2/2/w/300" alt="图片.png" tabindex="0" loading="lazy"><figcaption>图片.png</figcaption></figure><p>同时使用 zlmediakit 的<code>getStatistic</code>接口查看，发现<code>BufferList</code>对象个数很高，初步怀疑是由于网络带宽不足导致发送拥塞，内存暴涨，通过询问得知，公网 hls 访问，确实存在 ts 文件下载缓慢的问题：</p><figure><img src="https://upload-images.jianshu.io/upload_images/8409177-0259d17384210378.png?imageMogr2/auto-orient/strip|imageView2/2/w/600" alt="图片.png" tabindex="0" loading="lazy"><figcaption>图片.png</figcaption></figure><p>同时让他通过局域网测试 ts 下载，却发现非常快：</p><figure><img src="https://upload-images.jianshu.io/upload_images/8409177-368e718cc2870cc8.png?imageMogr2/auto-orient/strip|imageView2/2/w/600" alt="图片.png" tabindex="0" loading="lazy"><figcaption>图片.png</figcaption></figure><p>后来通过计算，发现确实由于网络带宽瓶颈每个用户积压一个 Buffer 包，而每个 Buffer 包用户设置的为 1MB，这样算下来，30K 用户，确实会积压 30GB 的发送缓存：</p><figure><img src="https://upload-images.jianshu.io/upload_images/8409177-10264ff3561e6ddc.png?imageMogr2/auto-orient/strip|imageView2/2/w/600" alt="图片.png" tabindex="0" loading="lazy"><figcaption>图片.png</figcaption></figure><figure><img src="https://upload-images.jianshu.io/upload_images/8409177-ff0d783f7941a9da.png?imageMogr2/auto-orient/strip|imageView2/2/w/600" alt="图片.png" tabindex="0" loading="lazy"><figcaption>图片.png</figcaption></figure><figure><img src="https://upload-images.jianshu.io/upload_images/8409177-d305041f6b99e04a.png?imageMogr2/auto-orient/strip|imageView2/2/w/600" alt="图片.png" tabindex="0" loading="lazy"><figcaption>图片.png</figcaption></figure><h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论" aria-hidden="true">#</a> 结论</h2><p>通过上面的经历，我们发现 zlmediakit 已经足以支撑 30K/50Gb 级别的 https-hls 并发能力, 理论上，http-hls 相比 https-hls 要少 1 次内存拷贝，和 1 次加密，性能应该要好很多；那么 zlmediakit 的性能上限在哪里？天知道！毕竟，我已经没有这么豪华的配置供我压测了；在此，我们先立一个保守的 flag 吧：</p><p><strong>单机 100K/100Gb 级别 hls 并发能力。</strong></p><p>那其他协议呢？ 我觉得应该不输 hls。</p>`,70)]))}const u=a(e,[["render",o],["__file","hls_high_performance_journey.html.vue"]]);export{u as default};
