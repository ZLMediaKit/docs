import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,o as c,c as l,a as n,d as s,b as p,w as i,e as u}from"./app-BLv1GOjr.js";const k={},r=n("h2",{id:"项目介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#项目介绍","aria-hidden":"true"},"#"),s(" 项目介绍")],-1),d={href:"https://github.com/xiongziliang/ZLMediaKit",target:"_blank",rel:"noopener noreferrer"},v=u(`<p>该框架基于 C++11 开发，避免使用裸指针，减少内存拷贝，代码精简可靠，并发性能优异，在 linux 平台下，单一进程即可充分利用多核 CPU 的优势；最大限度的榨干 CPU、网卡性能；轻松达到万兆网卡性能极限。同时也能在高性能的同时，做到极低延时，画面秒开。</p><p>目前 ZLMediaKit 经过多次版本迭代，编程模型多次升级优化；已经趋于成熟稳定，也在各种生产环境得到了验证，本文主要讨论 ZLMediaKit 高性能实现原理以及项目特点。</p><h2 id="网络模型对比" tabindex="-1"><a class="header-anchor" href="#网络模型对比" aria-hidden="true">#</a> 网络模型对比</h2><p>不同于 SRS 的单线程多协程、node.js/redis 的单线程、NGINX 的多进程模型；ZLMediaKit 采用的是单进程多线程模型。那么为什么 ZLMediaKit 要采用这样的编程模型呢？</p><p>作为一个多年的 C++服务器后台开发工程师，多年的工作经验告诉我，作为一个服务器程序，对于稳定性要求极高；一个服务器可以性能差点，但是绝不能轻易 core dump；服务中断、重启、异常，对于一个线上已运营项目来说结果是灾难性的。那么我们该怎么确保服务器的稳定？目前有以下手段：</p><ul><li>单线程模型</li><li>单线程+协程</li><li>单线程+多进程</li><li>多线程+锁</li><li>弃用 C/C++</li></ul><p>采用单线程模型的优点是，服务器简单可靠，不用考虑资源竞争互斥的问题，这样可以比较容易做到高稳定性；采用此模型的典型代表项目有 redis、node.js。但是由于是单线程模型，所以弊端也比较明显；那就是在多核 cpu 上不能充分利用多核 CPU 的算力，性能瓶颈主要在于 CPU(大家应该有过在 redis 中执行 keys *慢慢等待的经历)。</p><figure><img src="https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=3069000473,466332746&amp;fm=26&amp;gp=0.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>单线程+协程的方案本质上与纯单线程模型无区别，它们的区别主要编程风格上。纯单线程模型使用的是非阻塞式处处回调方式实现高并发，这种模型会有所谓的回调地狱的问题，编程起来会比较麻烦。而单线程+协程的方案是简化编程方式，采用自然的阻塞式编程风格，在协程库内部管理任务调度，本质也是非阻塞的。但是协程库涉及的比较底层，跟系统息息相关，所以跨平台不是很好做，而且设计实现一个协程库门槛较高。SRS 采用就是这编程模型，由于协程库的限制，SRS 不能在 windows 上运行。</p><p>为了解决上述单线程模型的问题，很多服务器采用单线程多进程的编程模型；在这种模型下，既有单线程模型的简单可靠的特性，又能充分发挥多核 CPU 的性能，而且某个进程挂了也不会影响其他进程，像 NGINX 就是这种编程模型；但是这种模型也有其局限性。在这种模型下，会话间是相互隔离的，两个会话可能运行在不同的进程上；这样就导致了会话间通信的困难。比如说 A 用户连接在服务器 A 进程上，B 用户连接在服务器 B 进程上；如果两者之间要完成某种数据交互，那么会异常困难，这样必须通过进程间通信来完成。而进程间通信代价和开销比较大，编程起来也比较困难。但是如果会话间无需数据交互(例如 http 服务器)，那么这种模型是特别适合的，所以 NGINX 作为 http 服务器也是非常成功的，但是如果是譬如即时聊天的那种需要会话间通信的服务，那么这种开发模型不是很适合。不过现在越来越多的服务都需要支持分布式集群部署，所以单线程多进程方案的缺陷越来越不明显。</p><p>由于 C/C++是种强类型静态语言，异常处理简单粗暴，动不动就 core dump。C/C++的设计理念就是发现错误及早暴露，在某种意义上来说，崩溃也是种好事，因为这样会引起你的重视，让你能及早发现定位并解决问题，而不是把问题拖延到无法解决的时候再暴露给你。但是这么做对一般人来说，C/C++就不是很友好了，人类并不像机器那样严谨，有点疏忽在所难免，况且有些小问题也无伤大雅，并不需要毁灭式的 core dump 来应对。而且 C/C++的学习曲线异常艰难困苦，很多人好几年也不得要领，所以很多人表示纷纷弃坑，转投 go / erlang / node.js 之类。</p><p>但是 C/C++由于其性能优越性，以及历史原因，在某些场景下是不二选择，而且 C/C++才是真正的跨平台语言；况且随着智能指针的推出，内存管理不再是难题；而 lambda 语法的支持，让程序上下文绑定不再困难。随着 C++新特性的支持，编译器静态反射机制的完善，现代 C++编程愈发简便快捷。ZLMediaKit 采用的就是 C++11 新标准以及相关理念完成的高性能流媒体服务框架。</p><p>与上面其它编程模型不同，ZLMediaKit 采用的是多线程开发模型；与传统的多线程模型不同；ZLMediaKit 采用了 C++11 的智能指针来做内存管理，在线程切换时可以完美的管理内存在多线程下共享以及其生命周期。同时互斥锁的粒度消减至极致，几乎可以忽略不计。所以采用多线程模型的 ZLMediaKit 性能损耗极低，每条线程的性能几乎可以媲美单线程模型，同时也可以充分榨干 CPU 的每一核心性能。</p><h2 id="网络模型详述" tabindex="-1"><a class="header-anchor" href="#网络模型详述" aria-hidden="true">#</a> 网络模型详述</h2><p>ZLMediaKit 在启动时会根据 cpu 核心数自动创建若干个 epoll 实例(非 linux 平台为 select)；这些 epoll 实例都会有一个线程来运行<code>epoll_wait</code>函数来等待事件的触发。</p><p>以 ZLMediaKit 的 RTMP 服务为例，在创建一个<code>TcpServer</code>时，ZLMediaKit 会把这个 Tcp 服务的监听套接字加入到每一个 epoll 实例，这样如果收到新的 RTMP 播放请求，那么多个 epoll 实例会在内核的调度下，自动选择负载较轻的线程触发 accept 事件，以下是代码片段：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">SessionType</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">uint16_t</span> port<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> host <span class="token operator">=</span> <span class="token string">&quot;0.0.0.0&quot;</span><span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> backlog <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token generic-function"><span class="token function">start_l</span><span class="token generic class-name"><span class="token operator">&lt;</span>SessionType<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>port<span class="token punctuation">,</span>host<span class="token punctuation">,</span>backlog<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">//自动加入到所有epoll线程监听</span>
   <span class="token class-name">EventPollerPool</span><span class="token double-colon punctuation">::</span><span class="token function">Instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">for_each</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> TaskExecutor<span class="token double-colon punctuation">::</span>Ptr <span class="token operator">&amp;</span>executor<span class="token punctuation">)</span><span class="token punctuation">{</span>
      EventPoller<span class="token double-colon punctuation">::</span>Ptr poller <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_pointer_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>EventPoller<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>poller <span class="token operator">==</span> _poller <span class="token operator">||</span> <span class="token operator">!</span>poller<span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">auto</span> <span class="token operator">&amp;</span>serverRef <span class="token operator">=</span> _clonedServer<span class="token punctuation">[</span>poller<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>serverRef<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//绑定epoll实例</span>
         serverRef <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>TcpServer<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>poller<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      serverRef<span class="token operator">-&gt;</span><span class="token function">cloneFrom</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">void</span> <span class="token function">cloneFrom</span><span class="token punctuation">(</span><span class="token keyword">const</span> TcpServer <span class="token operator">&amp;</span>that<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>that<span class="token punctuation">.</span>_socket<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">invalid_argument</span><span class="token punctuation">(</span><span class="token string">&quot;TcpServer::cloneFrom other with null socket!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  _sessionMaker <span class="token operator">=</span> that<span class="token punctuation">.</span>_sessionMaker<span class="token punctuation">;</span>
  <span class="token comment">//克隆一个相同fd的Socket对象</span>
  _socket<span class="token operator">-&gt;</span><span class="token function">cloneFromListenSocket</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>_socket<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  _timer <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>Timer<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token keyword">bool</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">onManagerSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>_poller<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token operator">-&gt;</span>mINI<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>that<span class="token punctuation">)</span><span class="token punctuation">;</span>
        _cloned <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务器在收到 accept 事件后，会创建一个<code>TcpSession</code>对象并绑定到该 epoll 实例（同时把与之对应的<code>peer fd</code>加入到相关 epoll 监听）。每一个 Tcp 连接都会对应一个<code>TcpSession</code>对象，在之后客户端与服务器的数据交互中，该<code>TcpSession</code>对象处理一切与之相关的业务数据，并且该对象之后生命周期内的一切事件都会由该 epoll 线程触发，这样服务器的每个 epoll 线程都能均匀的分派到合理的客户端数量。以下是服务器 accept 事件处理逻辑代码片段：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code> <span class="token comment">// 接收到客户端连接请求</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">onAcceptConnection</span><span class="token punctuation">(</span><span class="token keyword">const</span> Socket<span class="token double-colon punctuation">::</span>Ptr <span class="token operator">&amp;</span> sock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    weak_ptr<span class="token operator">&lt;</span>TcpServer<span class="token operator">&gt;</span> weakSelf <span class="token operator">=</span> <span class="token function">shared_from_this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//创建一个TcpSession;这里实现创建不同的服务会话实例</span>
    <span class="token keyword">auto</span> sessionHelper <span class="token operator">=</span> <span class="token function">_sessionMaker</span><span class="token punctuation">(</span>weakSelf<span class="token punctuation">,</span>sock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> <span class="token operator">&amp;</span>session <span class="token operator">=</span> sessionHelper<span class="token operator">-&gt;</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//把本服务器的配置传递给TcpSession</span>
        session<span class="token operator">-&gt;</span><span class="token function">attachServer</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//TcpSession的唯一识别符，可以是guid之类的</span>
        <span class="token keyword">auto</span> sessionId <span class="token operator">=</span> session<span class="token operator">-&gt;</span><span class="token function">getIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//记录该TcpSession</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">SessionMap</span><span class="token double-colon punctuation">::</span><span class="token function">Instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sessionId<span class="token punctuation">,</span>session<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//有同名session，说明getIdentifier生成的标识符有问题</span>
            WarnL <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;SessionMap::add failed:&quot;</span> <span class="token operator">&lt;&lt;</span> sessionId<span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//SessionMap中没有相关记录，那么_sessionMap更不可能有相关记录了；</span>
        <span class="token comment">//所以_sessionMap::emplace肯定能成功</span>
        <span class="token keyword">auto</span> success <span class="token operator">=</span> _sessionMap<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>sessionId<span class="token punctuation">,</span> sessionHelper<span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>
        <span class="token function">assert</span><span class="token punctuation">(</span>success <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        weak_ptr<span class="token operator">&lt;</span>TcpSession<span class="token operator">&gt;</span> <span class="token function">weakSession</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//会话接收数据事件</span>
    sock<span class="token operator">-&gt;</span><span class="token function">setOnRead</span><span class="token punctuation">(</span><span class="token punctuation">[</span>weakSession<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> Buffer<span class="token double-colon punctuation">::</span>Ptr <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>addr<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">//获取会话强引用</span>
      <span class="token keyword">auto</span> strongSession<span class="token operator">=</span>weakSession<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>strongSession<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//会话对象已释放</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
            <span class="token comment">//TcpSession处理业务数据</span>
      strongSession<span class="token operator">-&gt;</span><span class="token function">onRecv</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token comment">//会话接收到错误事件</span>
    sock<span class="token operator">-&gt;</span><span class="token function">setOnErr</span><span class="token punctuation">(</span><span class="token punctuation">[</span>weakSelf<span class="token punctuation">,</span>weakSession<span class="token punctuation">,</span>sessionId<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> SockException <span class="token operator">&amp;</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//在本函数作用域结束时移除会话对象</span>
            <span class="token comment">//目的是确保移除会话前执行其onError函数</span>
            <span class="token comment">//同时避免其onError函数抛异常时没有移除会话对象</span>
        onceToken <span class="token function">token</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">//移除掉会话</span>
                <span class="token class-name">SessionMap</span><span class="token double-colon punctuation">::</span><span class="token function">Instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>sessionId<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">auto</span> strongSelf <span class="token operator">=</span> weakSelf<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>strongSelf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">//在TcpServer对应线程中移除map相关记录</span>
                strongSelf<span class="token operator">-&gt;</span>_poller<span class="token operator">-&gt;</span><span class="token function">async</span><span class="token punctuation">(</span><span class="token punctuation">[</span>weakSelf<span class="token punctuation">,</span>sessionId<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">auto</span> strongSelf <span class="token operator">=</span> weakSelf<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>strongSelf<span class="token punctuation">)</span><span class="token punctuation">{</span>
                        <span class="token keyword">return</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    strongSelf<span class="token operator">-&gt;</span>_sessionMap<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>sessionId<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">//获取会话强应用</span>
      <span class="token keyword">auto</span> strongSession<span class="token operator">=</span>weakSession<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>strongSession<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//触发onError事件回调</span>
        strongSession<span class="token operator">-&gt;</span><span class="token function">onError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上诉描述，我们应该大概了解了 ZLMediaKit 的网络模型，通过这样的模型基本上能榨干 CPU 的算力，不过 CPU 算力如果使用不当 ，也可能白白浪费，使之做一些无用的事务，那么在 ZLMediaKit 中还有那些技术手段来提高性能呢？我们在下节展开论述。</p><h2 id="关闭互斥锁" tabindex="-1"><a class="header-anchor" href="#关闭互斥锁" aria-hidden="true">#</a> 关闭互斥锁</h2><p>上一节论述中，我们知道<code>TcpSession</code>是 ZLMediaKit 中的关键元素，服务器大部分计算都在 TcpSession 内完成。一个<code>TcpSession</code>由一个 epoll 实例掌管其生命周期，其他线程不得直接操作该<code>TcpSession</code>对象（必须通过线程切换到对应的 epoll 线程来完成操作）；所以从某种意义上来说<code>TcpSeesion</code>是单线程模型的；所以 ZLMediaKit 对于<code>TcpSession</code>所对应的网络 io 操作是无互斥锁保护的，ZLMediaKit 作为服务器模式运行，基本上是无锁的；这种情况下，锁对性能的影响几乎可以忽略不计。以下是 ZLMediaKit 关闭互斥锁的代码片段：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> Socket<span class="token double-colon punctuation">::</span>Ptr <span class="token function">onBeforeAcceptConnection</span><span class="token punctuation">(</span><span class="token keyword">const</span> EventPoller<span class="token double-colon punctuation">::</span>Ptr <span class="token operator">&amp;</span>poller<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">/**
       * 服务器模型socket是线程安全的，所以为了提高性能，关闭互斥锁
       * Socket构造函数第二个参数即为是否关闭互斥锁
       */</span>
    <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>Socket<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>poller<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token comment">//Socket对象的构造函数，第二个参数即为是否关闭互斥锁</span>
<span class="token class-name">Socket</span><span class="token double-colon punctuation">::</span><span class="token function">Socket</span><span class="token punctuation">(</span><span class="token keyword">const</span> EventPoller<span class="token double-colon punctuation">::</span>Ptr <span class="token operator">&amp;</span>poller<span class="token punctuation">,</span><span class="token keyword">bool</span> enableMutex<span class="token punctuation">)</span> <span class="token operator">:</span>
    <span class="token function">_mtx_sockFd</span><span class="token punctuation">(</span>enableMutex<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">_mtx_bufferWaiting</span><span class="token punctuation">(</span>enableMutex<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">_mtx_bufferSending</span><span class="token punctuation">(</span>enableMutex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  _poller <span class="token operator">=</span> poller<span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>_poller<span class="token punctuation">)</span><span class="token punctuation">{</span>
    _poller <span class="token operator">=</span> <span class="token class-name">EventPollerPool</span><span class="token double-colon punctuation">::</span><span class="token function">Instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPoller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

    _canSendSock <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  _readCB <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> Buffer<span class="token double-colon punctuation">::</span>Ptr <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    WarnL <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Socket not set readCB&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  _errCB <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> SockException <span class="token operator">&amp;</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    WarnL <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Socket not set errCB:&quot;</span> <span class="token operator">&lt;&lt;</span> err<span class="token punctuation">.</span><span class="token function">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  _acceptCB <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>Socket<span class="token double-colon punctuation">::</span>Ptr <span class="token operator">&amp;</span>sock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    WarnL <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Socket not set acceptCB&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  _flushCB <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  _beforeAcceptCB <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> EventPoller<span class="token double-colon punctuation">::</span>Ptr <span class="token operator">&amp;</span>poller<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//MutexWrapper对象定义，可以选择是否关闭互斥锁</span>
<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Mtx</span> <span class="token operator">=</span> recursive_mutex<span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">MutexWrapper</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">MutexWrapper</span><span class="token punctuation">(</span><span class="token keyword">bool</span> enable<span class="token punctuation">)</span><span class="token punctuation">{</span>
        _enable <span class="token operator">=</span> enable<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">~</span><span class="token function">MutexWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>_enable<span class="token punctuation">)</span><span class="token punctuation">{</span>
            _mtx<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>_enable<span class="token punctuation">)</span><span class="token punctuation">{</span>
            _mtx<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">bool</span> _enable<span class="token punctuation">;</span>
    Mtx _mtx<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="规避内存拷贝" tabindex="-1"><a class="header-anchor" href="#规避内存拷贝" aria-hidden="true">#</a> 规避内存拷贝</h2><p>传统的多线程模型下，做数据转发会存在线程切换的问题，为了确保线程安全，一般使用内存拷贝来规避该问题；而且对数据进行分包处理也很难做到不使用内存拷贝。但是流媒体这种业务逻辑，可能观看同一个直播的用户是海量的，如果每分发一次就做内存拷贝，那么开销是十分可观的，这将严重拖累服务器性能。</p><p>ZLMediaKit 在做媒体数据转发时，是不会做内存拷贝的，常规的 C++多线程编程很难做到这一点，但是我们在 C++11 的加持下，利用引用计数，巧妙的解决了多线程内存生命周期管理的问题，以下是 RTMP 服务器做媒体数据分发规避内存拷贝的代码片段：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">RtmpProtocol</span><span class="token double-colon punctuation">::</span><span class="token function">sendRtmp</span><span class="token punctuation">(</span><span class="token keyword">uint8_t</span> ui8Type<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> ui32StreamId<span class="token punctuation">,</span>
        <span class="token keyword">const</span> Buffer<span class="token double-colon punctuation">::</span>Ptr <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> ui32TimeStamp<span class="token punctuation">,</span> <span class="token keyword">int</span> iChunkId<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>iChunkId <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">||</span> iChunkId <span class="token operator">&gt;</span> <span class="token number">63</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">auto</span> strErr <span class="token operator">=</span> StrPrinter <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;不支持发送该类型的块流 ID:&quot;</span> <span class="token operator">&lt;&lt;</span> iChunkId <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">runtime_error</span><span class="token punctuation">(</span>strErr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//是否有扩展时间戳</span>
  <span class="token keyword">bool</span> bExtStamp <span class="token operator">=</span> ui32TimeStamp <span class="token operator">&gt;=</span> <span class="token number">0xFFFFFF</span><span class="token punctuation">;</span>

  <span class="token comment">// rtmp头</span>
  BufferRaw<span class="token double-colon punctuation">::</span>Ptr bufferHeader <span class="token operator">=</span> <span class="token function">obtainBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  bufferHeader<span class="token operator">-&gt;</span><span class="token function">setCapacity</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>RtmpHeader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  bufferHeader<span class="token operator">-&gt;</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>RtmpHeader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//对rtmp头赋值，如果使用整形赋值，在arm android上可能由于数据对齐导致总线错误的问题</span>
  RtmpHeader <span class="token operator">*</span>header <span class="token operator">=</span> <span class="token punctuation">(</span>RtmpHeader<span class="token operator">*</span><span class="token punctuation">)</span> bufferHeader<span class="token operator">-&gt;</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  header<span class="token operator">-&gt;</span>flags <span class="token operator">=</span> <span class="token punctuation">(</span>iChunkId <span class="token operator">&amp;</span> <span class="token number">0x3f</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  header<span class="token operator">-&gt;</span>typeId <span class="token operator">=</span> ui8Type<span class="token punctuation">;</span>
  <span class="token function">set_be24</span><span class="token punctuation">(</span>header<span class="token operator">-&gt;</span>timeStamp<span class="token punctuation">,</span> bExtStamp <span class="token operator">?</span> <span class="token number">0xFFFFFF</span> <span class="token operator">:</span> ui32TimeStamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">set_be24</span><span class="token punctuation">(</span>header<span class="token operator">-&gt;</span>bodySize<span class="token punctuation">,</span> buf<span class="token operator">-&gt;</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">set_le32</span><span class="token punctuation">(</span>header<span class="token operator">-&gt;</span>streamId<span class="token punctuation">,</span> ui32StreamId<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//发送rtmp头</span>
  <span class="token function">onSendRawData</span><span class="token punctuation">(</span>bufferHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">//扩展时间戳字段</span>
  BufferRaw<span class="token double-colon punctuation">::</span>Ptr bufferExtStamp<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>bExtStamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//生成扩展时间戳</span>
    bufferExtStamp <span class="token operator">=</span> <span class="token function">obtainBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bufferExtStamp<span class="token operator">-&gt;</span><span class="token function">setCapacity</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bufferExtStamp<span class="token operator">-&gt;</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set_be32</span><span class="token punctuation">(</span>bufferExtStamp<span class="token operator">-&gt;</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ui32TimeStamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">//生成一个字节的flag，标明是什么chunkId</span>
  BufferRaw<span class="token double-colon punctuation">::</span>Ptr bufferFlags <span class="token operator">=</span> <span class="token function">obtainBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  bufferFlags<span class="token operator">-&gt;</span><span class="token function">setCapacity</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  bufferFlags<span class="token operator">-&gt;</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  bufferFlags<span class="token operator">-&gt;</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>iChunkId <span class="token operator">&amp;</span> <span class="token number">0x3f</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  size_t offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">uint32_t</span> totalSize <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>RtmpHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>offset <span class="token operator">&lt;</span> buf<span class="token operator">-&gt;</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>offset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//发送trunkId</span>
      <span class="token function">onSendRawData</span><span class="token punctuation">(</span>bufferFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>
      totalSize <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bExtStamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//扩展时间戳</span>
      <span class="token function">onSendRawData</span><span class="token punctuation">(</span>bufferExtStamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
      totalSize <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    size_t chunk <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>_iChunkLenOut<span class="token punctuation">,</span> buf<span class="token operator">-&gt;</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//分发流媒体数据包，此处规避了内存拷贝</span>
    <span class="token function">onSendRawData</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>BufferPartial<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span>offset<span class="token punctuation">,</span>chunk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    totalSize <span class="token operator">+=</span> chunk<span class="token punctuation">;</span>
    offset <span class="token operator">+=</span> chunk<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    _ui32ByteSent <span class="token operator">+=</span> totalSize<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_ui32WinSize <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> _ui32ByteSent <span class="token operator">-</span> _ui32LastSent <span class="token operator">&gt;=</span> _ui32WinSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      _ui32LastSent <span class="token operator">=</span> _ui32ByteSent<span class="token punctuation">;</span>
      <span class="token function">sendAcknowledgement</span><span class="token punctuation">(</span>_ui32ByteSent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//BufferPartial对象用于rtmp包的chunk大小分片，规避内存拷贝</span>
<span class="token keyword">class</span> <span class="token class-name">BufferPartial</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Buffer</span></span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">BufferPartial</span><span class="token punctuation">(</span><span class="token keyword">const</span> Buffer<span class="token double-colon punctuation">::</span>Ptr <span class="token operator">&amp;</span>buffer<span class="token punctuation">,</span><span class="token keyword">uint32_t</span> offset<span class="token punctuation">,</span><span class="token keyword">uint32_t</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>
        _buffer <span class="token operator">=</span> buffer<span class="token punctuation">;</span>
        _data <span class="token operator">=</span> buffer<span class="token operator">-&gt;</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> offset<span class="token punctuation">;</span>
        _size <span class="token operator">=</span> size<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token operator">~</span><span class="token function">BufferPartial</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> _data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">uint32_t</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> _size<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    Buffer<span class="token double-colon punctuation">::</span>Ptr _buffer<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>_data<span class="token punctuation">;</span>
    <span class="token keyword">uint32_t</span> _size<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在发送 RTP 包时也是采用同样的原理来避免内存拷贝。</p><h2 id="使用对象循环池" tabindex="-1"><a class="header-anchor" href="#使用对象循环池" aria-hidden="true">#</a> 使用对象循环池</h2><p>内存开辟销毁是全局互斥的，过多的 new/delete 不仅降低程序性能，还会导致内存碎片。ZLMediaKit 尽量使用循环池来避免这些问题，以下代码时 RTP 包循环池使用代码片段：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>RtpPacket<span class="token double-colon punctuation">::</span>Ptr <span class="token class-name">RtpInfo</span><span class="token double-colon punctuation">::</span><span class="token function">makeRtp</span><span class="token punctuation">(</span>TrackType type<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> data<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">bool</span> mark<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> uiStamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">uint16_t</span> ui16RtpLen <span class="token operator">=</span> len <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">;</span>
    <span class="token keyword">uint32_t</span> ts <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_ui32SampleRate <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">*</span> uiStamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">uint16_t</span> sq <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>_ui16Sequence<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">uint32_t</span> sc <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>_ui32Ssrc<span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token comment">//采用循环池来获取rtp对象</span>
    <span class="token keyword">auto</span> rtppkt <span class="token operator">=</span> <span class="token class-name">ResourcePoolHelper</span><span class="token operator">&lt;</span>RtpPacket<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">obtainObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pucRtp <span class="token operator">=</span> rtppkt<span class="token operator">-&gt;</span>payload<span class="token punctuation">;</span>
    pucRtp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;$&#39;</span><span class="token punctuation">;</span>
    pucRtp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> _ui8Interleaved<span class="token punctuation">;</span>
    pucRtp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> ui16RtpLen <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
    pucRtp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> ui16RtpLen <span class="token operator">&amp;</span> <span class="token number">0x00FF</span><span class="token punctuation">;</span>
    pucRtp<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x80</span><span class="token punctuation">;</span>
    pucRtp<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>mark <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">|</span> _ui8PlayloadType<span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pucRtp<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>sq<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pucRtp<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ts<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//ssrc</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pucRtp<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>sc<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//playload</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pucRtp<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>

    rtppkt<span class="token operator">-&gt;</span>PT <span class="token operator">=</span> _ui8PlayloadType<span class="token punctuation">;</span>
    rtppkt<span class="token operator">-&gt;</span>interleaved <span class="token operator">=</span> _ui8Interleaved<span class="token punctuation">;</span>
    rtppkt<span class="token operator">-&gt;</span>mark <span class="token operator">=</span> mark<span class="token punctuation">;</span>
    rtppkt<span class="token operator">-&gt;</span>length <span class="token operator">=</span> len <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">;</span>
    rtppkt<span class="token operator">-&gt;</span>sequence <span class="token operator">=</span> _ui16Sequence<span class="token punctuation">;</span>
    rtppkt<span class="token operator">-&gt;</span>timeStamp <span class="token operator">=</span> uiStamp<span class="token punctuation">;</span>
    rtppkt<span class="token operator">-&gt;</span>ssrc <span class="token operator">=</span> _ui32Ssrc<span class="token punctuation">;</span>
    rtppkt<span class="token operator">-&gt;</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>
    rtppkt<span class="token operator">-&gt;</span>offset <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>
    _ui16Sequence<span class="token operator">++</span><span class="token punctuation">;</span>
    _ui32TimeStamp <span class="token operator">=</span> uiStamp<span class="token punctuation">;</span>
    <span class="token keyword">return</span> rtppkt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="设置-socket-相关标志" tabindex="-1"><a class="header-anchor" href="#设置-socket-相关标志" aria-hidden="true">#</a> 设置 Socket 相关标志</h2><p>开启 TCP_NODELAY 后可以提高服务器响应速度，对于一些对延时要求比较敏感的服务（比如 ssh 服务），开启 TCP_NODELAY 标记比较重要。但是对于流媒体服务，由于数据是源源不断并且量也比较大，所以关闭 TCP_NODELAY 可以减少 ACK 包数量，充分利用带宽资源。</p><p>MSG_MORE 是另外一个提高网络吞吐量的标记；这个标记的作用是在发送数据时，服务器会缓存一定的数据然后再打包一次性发送出去；而像 RTSP 这种业务场景，MSG_MORE 标记就显得格外合适；因为 RTP 包一般都很小(小于 MTU)，通过 MSG_MORE 标记可以极大减少数据包个数。</p><p>ZLMediaKit 在处理播放器时，握手期间是开启 TCP_NODELAY 并且关闭 MSG_MORE 的，这样做的目的是提高握手期间数据交互的延时，减少链接建立耗时，提高视频打开速度。在握手成功后，ZLMediaKit 会关闭 TCP_NODELAY 并打开 MSG_MORE；这样又能减少数据报文个数，提高网络利用率。</p><h2 id="批量数据发送" tabindex="-1"><a class="header-anchor" href="#批量数据发送" aria-hidden="true">#</a> 批量数据发送</h2><p>网络编程中，大家应该都用过 send/sendto/write 函数，但是 writev/sendmsg 函数应该用的不多。ZLMediaKit 采用 sendmsg 函数来做批量数据发送，这样在网络不是很好或者服务器负载比较高时，可以明显减少系统调用(系统调用开销比较大)次数，提高程序性能。以下是代码片段：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token class-name">BufferList</span><span class="token double-colon punctuation">::</span><span class="token function">send_l</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span><span class="token keyword">bool</span> udp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">msghdr</span> msg<span class="token punctuation">;</span>
        msg<span class="token punctuation">.</span>msg_name <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        msg<span class="token punctuation">.</span>msg_namelen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        msg<span class="token punctuation">.</span>msg_iov <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>_iovec<span class="token punctuation">[</span>_iovec_off<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        msg<span class="token punctuation">.</span>msg_iovlen <span class="token operator">=</span> _iovec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> _iovec_off<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>msg_iovlen <span class="token operator">&gt;</span> IOV_MAX<span class="token punctuation">)</span><span class="token punctuation">{</span>
            msg<span class="token punctuation">.</span>msg_iovlen <span class="token operator">=</span> IOV_MAX<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        msg<span class="token punctuation">.</span>msg_control <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        msg<span class="token punctuation">.</span>msg_controllen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        msg<span class="token punctuation">.</span>msg_flags <span class="token operator">=</span> flags<span class="token punctuation">;</span>
        n <span class="token operator">=</span> udp <span class="token operator">?</span> <span class="token function">send_iovec</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token operator">&amp;</span>msg<span class="token punctuation">,</span>flags<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">sendmsg</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token operator">&amp;</span>msg<span class="token punctuation">,</span>flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> n <span class="token operator">&amp;&amp;</span> UV_EINTR <span class="token operator">==</span> <span class="token function">get_uv_error</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&gt;=</span> _remainSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//全部写完了</span>
        _iovec_off <span class="token operator">=</span> _iovec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _remainSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//部分发送成功</span>
        <span class="token function">reOffset</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//一个字节都未发送</span>
    <span class="token keyword">return</span> n<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="批量线程切换" tabindex="-1"><a class="header-anchor" href="#批量线程切换" aria-hidden="true">#</a> 批量线程切换</h2><p>多线程模型下，流媒体服务器在做媒体数据分发时，肯定要做线程切换。线程切换的目的一是确保线程安全，防止多条线程同时操作某个对象或资源；二是可以充分利用多核算力，防止单线程成为转发性能瓶颈。ZLMediaKit 在做媒体转发时，也同样使用到线程切换来实现多线程的数据分发。但是线程切换开销也比较大，如果线程切换次数太多，将严重影响服务器性能。</p><p>现在我们假设一个场景：RTMP 推流客户端 A 推送一个直播到服务器，这个直播比较火爆，假设有同时 10K 个用户正在观看这个直播，那么我们在分发一个 RTMP 数据包时是否需要最多进行 10K 次线程切换然后再发送数据？虽然 ZLMediaKit 的线程切换比较轻量，但是这样频繁的线程切换也是扛不住的。</p><p>ZLMediaKit 在处理这类问题时，采用批量线程切换来尽量减少线程切换次数。假如说这 10K 的用户分布在 32 个 cpu 核心上，那么 ZLMediaKit 最多进行 32 次线程切换，这样 ZLMediaKit 将大大减少线程切换次数，同时又能使用多线程来分发数据，大大提高网络吞吐量，以下是批量线程切换代码片段：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">emitRead</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>in<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">LOCK_GUARD</span><span class="token punctuation">(</span>_mtx_map<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>pr <span class="token operator">:</span> _dispatcherMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">auto</span> second <span class="token operator">=</span> pr<span class="token punctuation">.</span>second<span class="token punctuation">;</span>
            <span class="token comment">//批量线程切换</span>
            pr<span class="token punctuation">.</span>first<span class="token operator">-&gt;</span><span class="token function">async</span><span class="token punctuation">(</span><span class="token punctuation">[</span>second<span class="token punctuation">,</span>in<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                second<span class="token operator">-&gt;</span><span class="token function">emitRead</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token comment">//线程切换后再做遍历</span>
<span class="token keyword">void</span> <span class="token function">emitRead</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>in<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> _readerMap<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> it <span class="token operator">!=</span> _readerMap<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">auto</span> reader <span class="token operator">=</span> it<span class="token operator">-&gt;</span>second<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>reader<span class="token punctuation">)</span><span class="token punctuation">{</span>
                it <span class="token operator">=</span> _readerMap<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">--</span>_readerSize<span class="token punctuation">;</span>
                <span class="token function">onSizeChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//触发数据分发操作</span>
            reader<span class="token operator">-&gt;</span><span class="token function">onRead</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">++</span>it<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="采用右值引用拷贝" tabindex="-1"><a class="header-anchor" href="#采用右值引用拷贝" aria-hidden="true">#</a> 采用右值引用拷贝</h2><p>ZLMediaKit 中也尽量使用右值引用拷贝来规避内存拷贝，这里就不展开论述。</p><h2 id="其他特性" tabindex="-1"><a class="header-anchor" href="#其他特性" aria-hidden="true">#</a> 其他特性</h2><h3 id="优化及时推流打开率" tabindex="-1"><a class="header-anchor" href="#优化及时推流打开率" aria-hidden="true">#</a> 优化及时推流打开率</h3><p>有些应用场景需要设备端开始推流，然后 APP 立即观看的应用场景。传统的 rtmp 服务器对此应用场景是未作任何优化的，如果 APP 播放请求在推流尚未建立之前到达，那么将导致 APP 播放失败，这样视频打开成功率就会降低，用户体验很不好。</p><p>ZLMediaKit 在针对该应用场景时，做了特别的优化；实现原理如下：</p><p>1、收到播放请求时，立即检查是否已经存在的媒体源，如果存在返回播放成功，否则进入第 2 步。</p><p>2、监听对应的媒体源注册事件，同时添加播放超时定时器，并且不回复播放器然后返回。逻辑将进入第 3 步或第 4 步。</p><p>3、媒体源注册成功，那么立即响应播放器播放成功，同时删除播放超时定时器，并移除媒体注册事件监听。</p><p>4、超时定时器触发，响应播放器播放失败，同时删除播放超时定时器，并移除媒体注册事件监听。</p><p>使用 ZLMediaKit 作为流媒体服务器，可以 APP 播放请求和设备端推流同时进行。</p><h2 id="性能测试对比" tabindex="-1"><a class="header-anchor" href="#性能测试对比" aria-hidden="true">#</a> 性能测试对比</h2>`,55),m=n("p",null,"在测试时发现，ZLMediaKit 在负载比较低时,其单线程性能大概是 SRS 的 50%，单条线程大概能支撑 5K 个播放器，导致这个性能差距的主要原因时由于采用本地轮回网络，网络状况为理想，那么 sendmsg 批量发送将不起优化左右；而 SRS 使用了合并写特性(就是缓存 300 毫秒左右的数据后一次性发送)，可以减少系统调用次数；如果负载比较高，以及真实网络环境下，ZLMediaKit 单线程性能应该跟 SRS 差距更小，我们在测试报告中也能发现在客户端比较多时，ZLMediaKit 单线程线程性能有比较大的提升。",-1),b=n("p",null,"由于 ZLMediaKit 支持多线程，可以充分利用多核 CPU 的性能，在多核服务器上，CPU 已经不再是性能瓶颈，为了减少直播延时，目前合并写特性是默认关闭的，可以通过配置文件开启。",-1);function f(g,w){const t=a("ExternalLinkIcon"),e=a("RouterLink");return c(),l("div",null,[r,n("p",null,[n("a",d,[s("ZLMediaKit"),p(t)]),s("是一套高性能的流媒体服务框架，目前支持 rtmp/rtsp/hls/http-flv 流媒体协议。该项目已支持 linux、macos、windows、ios、android 平台，支持的编码格式包括 H264、AAC、H265（仅 rtsp 支持 H265）;采用的模型是多线程 IO 多路复用非阻塞式编程(linux 下采用 epoll、其他平台采用 select)。")]),v,n("p",null,[s("目前对 ZLMediaKit 做了一些性能测试，查看地址："),p(e,{to:"/reference/test/benchmark.html"},{default:i(()=>[s("benchmark")]),_:1})]),m,b])}const h=o(k,[["render",f],["__file","high_concurrency_implementation_principle.html.vue"]]);export{h as default};
