import{_ as p,a as o,b as u,c as m}from"./gb28181_push_streaming_4-BtAS7l2e.js";import{_ as g}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as d,o as f,c as b,e as n,a as i,b as r,d as t,w as s}from"./app-CRnFokh3.js";const v={},k={href:"https://github.com/xia-chu/ZLMediaKit/issues/267",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/ZLMediaKit/ZLMediaKit/issues/961",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com/ZLMediaKit/ZLMediaKit/issues/1221",target:"_blank",rel:"noopener noreferrer"},M={href:"https://notemi.cn/wvp---zlmedia-kit---mediaserverui-to-realize-streaming-playback-and-recording-of-camera-gb28181.html",target:"_blank",rel:"noopener noreferrer"},h={href:"http://dlgcy.com/gb28181-solution-zlmediakit-mediaserverui/",target:"_blank",rel:"noopener noreferrer"},K={href:"https://github.com/ZLMediaKit/ZLMediaKit/issues/2217",target:"_blank",rel:"noopener noreferrer"};function Z(w,e){const l=d("RouterLink"),a=d("ExternalLinkIcon");return f(),b("div",null,[e[27]||(e[27]=n('<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>ZLMediaKit 支持 GB28181 的 ps-rtp 推流，支持的编码格式分别为 <code>h264/h265/aac/g711/opus</code>。 在收到 GB28181 推流后，ZLMediaKit 会依次做以下事情：</p><ul><li>rtp 排序去重。</li><li>rtp 解析成 ps 或 ts。</li><li>ps 或 ts 解析成<code>h264/h265/aac/g711/opus</code>。</li><li>输入到复用器，生成 rtsp/rtmp/ts/fmp4 等格式，以便转换成其他协议或容器。</li></ul><h2 id="简单使用" tabindex="-1"><a class="header-anchor" href="#简单使用" aria-hidden="true">#</a> 简单使用</h2><p>ZLMediaKit 默认开启 10000 端口用于接收 UDP/TCP 的 GB28181 推流，由于国标推流不好测试，ZLMediaKit 同时也支持 rtp_mpegts 推流，代码会自适应判断是否为 ps 还是 ts。 所以如果大家没有摄像头的情况下，可以用 FFmpeg 简单测试，基本上体验跟国标推流并无二致。</p>',5)),i("ul",null,[e[9]||(e[9]=n(`<li><p>ffmpeg 推流命令:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> ffmpeg <span class="token parameter variable">-re</span> <span class="token parameter variable">-i</span> www/record/robot.mp4 <span class="token parameter variable">-vcodec</span> h264 <span class="token parameter variable">-acodec</span> aac <span class="token parameter variable">-f</span> rtp_mpegts rtp://127.0.0.1:10000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>`,1)),i("li",null,[e[7]||(e[7]=i("p",null,"MediaServer 收到推流后的日志：",-1)),e[8]||(e[8]=i("figure",null,[i("img",{src:p,alt:"图片",tabindex:"0",loading:"lazy"}),i("figcaption",null,"图片")],-1)),i("p",null,[e[1]||(e[1]=r("上图中，这个推流的 rtp ssrc 为 BFC2C622(16 进制打印)，这个流的 app 为")),e[2]||(e[2]=i("code",null,"rtp",-1)),e[3]||(e[3]=r(", stream_id 为")),e[4]||(e[4]=i("code",null,"BFC2C622",-1)),e[5]||(e[5]=r("，您可以根据")),t(l,{to:"/guide/media_server/play_url_rules.html"},{default:s(()=>e[0]||(e[0]=[r("wiki")])),_:1}),e[6]||(e[6]=r("来组合成 url 并播放这个流。"))])])]),e[28]||(e[28]=i("p",null,"需要指出的是，国标推流的 app 固定为 rtp，你只能通过代码来修改它，stream_id 为 rtp 流的 ssrc，这个是随机的，在 FFmpeg 中貌似没法控制。",-1)),i("p",null,[e[11]||(e[11]=r("另外，每次推流时，请更换 ssrc，否则 ZLMediaKit 发现推流端 ip 和端口变化后，会直接丢弃 rtp 包(现象如此")),i("a",k,[e[10]||(e[10]=r("issue")),t(a)]),e[12]||(e[12]=r(")；这样做的目的是为了防止两个设备使用同一个 ssrc 推流时互相干扰。"))]),e[29]||(e[29]=i("h2",{id:"高阶使用",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#高阶使用","aria-hidden":"true"},"#"),r(" 高阶使用")],-1)),e[30]||(e[30]=i("p",null,"在推流给 10000 端口时，您可能发现有个缺陷，就是 stream_id 是 ssrc，比较抽象，可能还没法控制。",-1)),i("p",null,[e[14]||(e[14]=r("那么我们能否自定义 stream_id? 答案是肯定的，ZLMediaKit 通过")),t(l,{to:"/guide/media_server/restful_api.html#24indexapiopenrtpserver"},{default:s(()=>e[13]||(e[13]=[r("restful api")])),_:1}),e[15]||(e[15]=r("可以动态开启国标收流端口(同时支持 udp/tcp 模式)。"))]),e[31]||(e[31]=n(`<p>在使用 openRtpServer 接口动态开启国标收流端口后，这个端口只能产生一个流，也就是说，一个摄像头需要一个服务器端口用于接收国标推流。</p><ul><li>以下是演示范例(postman 工具调用 openRtpServer 接口创建随机端口)：</li></ul><figure><img src="https://user-images.githubusercontent.com/11495632/93871851-e232dc00-fd01-11ea-8802-b8e91e5f6de1.png" alt="图片" width="1631" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><ul><li>然后启动 FFmpeg 推流</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> ffmpeg <span class="token parameter variable">-re</span> <span class="token parameter variable">-i</span> www/record/robot.mp4 <span class="token parameter variable">-vcodec</span> h264 <span class="token parameter variable">-acodec</span> aac <span class="token parameter variable">-f</span> rtp_mpegts rtp://127.0.0.1:50077
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>以下是推流后注册的服务器日志</p><figure><img src="`+m+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure></li><li><p>需要指出的是，如果 openRtpServer 接口创建的端口一直没收到流（或者解析不出流），那么会自动关闭和释放。</p></li></ul><h2 id="调试文件生成" tabindex="-1"><a class="header-anchor" href="#调试文件生成" aria-hidden="true">#</a> 调试文件生成</h2><p>如果你的 MediaServer 能收到国标推流，但是未出现<code>媒体注册</code>相关日志，那么有可能是流有些异常，你可以修改配置文件<code>rtp_proxy.dumpDir</code>指定调试文件导出目录， 这样 ZLMediaKit 会把国标流导出到该文件夹，就像这样：</p><figure><img src="https://user-images.githubusercontent.com/11495632/93872911-6c2f7480-fd03-11ea-85d4-911d6d998c83.png" alt="图片" width="611" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>你可以直接用 ffplay 播放<code>mp2/video后缀的文件</code>，<code>rtp</code>后缀的文件，你可以用测试工具<code>test_rtp</code>调试，或者你可以把它分享给其他人帮你分析原因。</p><h2 id="让-zlmediakit-往其他国标服务器推流" tabindex="-1"><a class="header-anchor" href="#让-zlmediakit-往其他国标服务器推流" aria-hidden="true">#</a> 让 ZLMediaKit 往其他国标服务器推流</h2>',11)),i("p",null,[e[17]||(e[17]=r("你可以使用")),t(l,{to:"/guide/media_server/restful_api.html#27indexapistartsendrtp"},{default:s(()=>e[16]||(e[16]=[r("restful api")])),_:1}),e[18]||(e[18]=r("让 ZLMediaKit 生成国标流并往其他服务器推送，支持其他任何已注册的流转国标流。"))]),e[32]||(e[32]=i("ul",null,[i("li",null,"postman 调用 startSendRtp 接口推送国标流：")],-1)),e[33]||(e[33]=i("figure",null,[i("img",{src:"https://user-images.githubusercontent.com/11495632/93873636-a0576500-fd04-11ea-8b0f-98fb3f60c778.png",alt:"图片",width:"1551",tabindex:"0",loading:"lazy"}),i("figcaption",null,"图片")],-1)),e[34]||(e[34]=i("figure",null,[i("img",{src:o,alt:"图片",tabindex:"0",loading:"lazy"}),i("figcaption",null,"图片")],-1)),e[35]||(e[35]=i("ul",null,[i("li",null,"上图中是推送国标流给自己，当然你也可以推送给其他服务器，支持 udp/tcp 方式推流。")],-1)),e[36]||(e[36]=i("h2",{id:"性能",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#性能","aria-hidden":"true"},"#"),r(" 性能")],-1)),i("p",null,[e[20]||(e[20]=r("GB28181 的推流性能测试，请参考：")),i("a",x,[e[19]||(e[19]=r("#961")),t(a)])]),e[37]||(e[37]=i("h2",{id:"丢包问题调试",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#丢包问题调试","aria-hidden":"true"},"#"),r(" 丢包问题调试")],-1)),e[38]||(e[38]=i("p",null,"如果在测试 GB28181 UDP 推流时，频繁打印以下日志:",-1)),e[39]||(e[39]=i("figure",null,[i("img",{src:u,alt:"图片",tabindex:"0",loading:"lazy"}),i("figcaption",null,"图片")],-1)),i("p",null,[e[22]||(e[22]=r("请查看此")),i("a",L,[e[21]||(e[21]=r("issue")),t(a)]),e[23]||(e[23]=r(",特别提示,wifi 情况下,由于无线网络干扰严重，丢包问题很可能确实是网络质量差导致的。"))]),e[40]||(e[40]=i("h2",{id:"相关文章推荐阅读",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#相关文章推荐阅读","aria-hidden":"true"},"#"),r(" 相关文章推荐阅读")],-1)),i("ul",null,[i("li",null,[i("p",null,[i("a",M,[e[24]||(e[24]=r("WVP+ZLMediaKit+MediaServerUI 实现摄像头 GB28181 推流播放录制")),t(a)])])]),i("li",null,[i("p",null,[i("a",h,[e[25]||(e[25]=r("使用 GB28181.Solution + ZLMediaKit + MediaServerUI 进行摄像头推流和播放")),t(a)])])]),i("li",null,[i("p",null,[i("a",K,[e[26]||(e[26]=r("GB28181 语音对讲")),t(a)])])])])])}const S=g(v,[["render",Z],["__file","push_streaming.html.vue"]]);export{S as default};
