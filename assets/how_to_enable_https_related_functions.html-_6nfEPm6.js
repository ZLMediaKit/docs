import{_ as l,a as t,b as d,c as r,d as o,e as c,f as p,g as u,h as m,i as g}from"./how_to_enable_https_related_functions_zh_10-VbCtxu5k.js";import{_ as b}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as f,c as v,o as h,b as s,a as n,e as i,d as k,w as _}from"./app-D6CC-_aF.js";const x={};function z(y,a){const e=f("RouterLink");return h(),v("div",null,[a[6]||(a[6]=s(`<h2 id="一、编译时开启-openssl-特性" tabindex="-1"><a class="header-anchor" href="#一、编译时开启-openssl-特性" aria-hidden="true">#</a> 一、编译时开启 openssl 特性</h2><p>zlmediakit 的 https(另外还包括 rtmps/rtsps/webrtc/wss)功能依赖 openssl 库，在编译 zlmediakit 时，应该先在系统默认环境安装 openssl 库，ubuntu 下通过以下命令安装：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libssl-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果您的系统默认 openssl 版本太老，可以选择自行编译安装 openssl 到自定义路径；此时，在编译 zlmediakit 时可以通过以下命令指定 openssl 自定义安装路径：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ZLMediaKit
<span class="token function">mkdir</span> build
<span class="token builtin class-name">cd</span> build
cmake <span class="token punctuation">..</span> <span class="token parameter variable">-DOPENSSL_ROOT_DIR</span><span class="token operator">=</span>/path/to/your/new/openssl/install/root/dir
<span class="token function">make</span> -j<span class="token variable"><span class="token variable">$(</span>nproc<span class="token variable">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、创建证书" tabindex="-1"><a class="header-anchor" href="#二、创建证书" aria-hidden="true">#</a> 二、创建证书</h2>`,6)),n("ul",null,[n("li",null,[n("p",null,[a[1]||(a[1]=i("如果你还没购买域名，可以使用")),k(e,{to:"/zh/guide/media_server/generate_ssl_self-signed_certificate_and_test.html"},{default:_(()=>a[0]||(a[0]=[i("自签名证书")])),_:1}),a[2]||(a[2]=i("或 zlmediakit 自带默认证书")),a[3]||(a[3]=n("code",null,"default.pem",-1)),a[4]||(a[4]=i("测试。"))])]),a[5]||(a[5]=n("li",null,[n("p",null,[n("strong",null,"如果你已经购买域名，以阿里云为例，你可以选择为您的域名申请免费证书：")])],-1))]),a[7]||(a[7]=s('<figure><img src="'+l+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><ul><li><strong>申请免费证书额度后，可以点击<code>创建证书</code>按钮，在弹出页面输入您的域名：</strong></li></ul><figure><img src="'+t+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><ul><li><strong>点击下一步后提交审核:</strong></li></ul><figure><img src="'+d+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h2 id="三、下载证书并合并为-zlmediakit-支持的证书类型" tabindex="-1"><a class="header-anchor" href="#三、下载证书并合并为-zlmediakit-支持的证书类型" aria-hidden="true">#</a> 三、下载证书并合并为 zlmediakit 支持的证书类型：</h2><ul><li><strong>下载证书：</strong></li></ul><figure><img src="'+r+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><ul><li><strong>选择下载 nginx 或其他方式都可(两者证书类型一样)：</strong></li></ul><figure><img src="'+o+`" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><ul><li><strong>解压下载压缩包后文件如下</strong>：</li></ul><figure><img src="https://user-images.githubusercontent.com/11495632/191884186-3c09f0ed-0042-417c-a8dc-ad87c4c0c1ed.png" alt="图片" width="760" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><ul><li>key 后缀的文件是私钥，pem 后缀的文件为公钥，两者可以使用文本编辑器打开，它们都是 base64 编码的字符串，两个字符串拼接在一起后就是 zlmediakit 支持的证书文件类型了：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#进入文件夹</span>
<span class="token builtin class-name">cd</span> 8516590_test.zlmediakit.com_nginx
<span class="token comment">#合并公钥私钥</span>
<span class="token function">cat</span> 8516590_test.zlmediakit.com.key 8516590_test.zlmediakit.com.pem <span class="token operator">&gt;</span> default.pem
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、zlmediakit-加载证书" tabindex="-1"><a class="header-anchor" href="#四、zlmediakit-加载证书" aria-hidden="true">#</a> 四、zlmediakit 加载证书</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#进入zlmediakit编译后的二进制目录(不同平台路径有所不同)</span>
<span class="token builtin class-name">cd</span> ~/git/ZLMediaKit/release/darwin/Debug/

<span class="token comment">#把合并后的证书拷贝过来</span>
<span class="token function">cp</span> ~/Downloads/8516590_test.zlmediakit.com_nginx/default.pem ./

<span class="token comment">#启动进程</span>
./MediaServer <span class="token parameter variable">-s</span> default.pem
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+c+`" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h2 id="五、测试" tabindex="-1"><a class="header-anchor" href="#五、测试" aria-hidden="true">#</a> 五、测试</h2><ul><li>如果你的开发机的 ip 并不是证书绑定域名映射映射的 ip，那么可以通过修改 host 文件来实现测试, 以 linux/mac 为例：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#打开host文件</span>
<span class="token function">sudo</span> <span class="token function">vi</span> /etc/hosts
<span class="token comment">#新增内容(本机ip+空格+你的域名)</span>
<span class="token number">127.0</span>.0.1  test.zlmediakit.com
<span class="token comment">#修改后保存退出vi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>打开浏览器输入 https 地址测试：</strong></li></ul><figure><img src="`+p+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><ul><li><strong>查看证书：</strong></li></ul><figure><img src="'+u+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h2 id="六、部署线上环境" tabindex="-1"><a class="header-anchor" href="#六、部署线上环境" aria-hidden="true">#</a> 六、部署线上环境</h2><ul><li>以上 5 步都走完了，验证通过，那么我们接下来可以部署线上环境；部署线上环境只需要把证书绑定的域名解析到您云主机的真实公网 ip 即可：</li></ul><figure><img src="'+m+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><figure><img src="'+g+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure>',28))])}const D=b(x,[["render",z],["__file","how_to_enable_https_related_functions.html.vue"]]);export{D as default};
