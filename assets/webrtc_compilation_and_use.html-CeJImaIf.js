import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as p,c,a as n,d as s,b as e,e as t}from"./app-BJNuBvSk.js";const o={},r=t(`<h2 id="环境" tabindex="-1"><a class="header-anchor" href="#环境" aria-hidden="true">#</a> 环境</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>编译机器：
centos <span class="token number">7.6</span>
gcc version <span class="token number">5.4</span>.0 <span class="token punctuation">(</span>GCC<span class="token punctuation">)</span>
cmake version <span class="token number">3.20</span>.5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="依赖准备" tabindex="-1"><a class="header-anchor" href="#依赖准备" aria-hidden="true">#</a> 依赖准备</h2>`,3),u=t(`<li><p>openssl 安装 (openssl 版本要求 1.1 以上)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">wget</span> https://www.openssl.org/source/openssl-1.1.1k.tar.gz
$ <span class="token function">tar</span> <span class="token parameter variable">-xvzf</span> openssl-1.1.1k.tar.gz
$ yum <span class="token function">install</span> <span class="token parameter variable">-y</span> zlib zlib-devel perl-CPAN
$ ./config shared <span class="token parameter variable">--openssldir</span><span class="token operator">=</span>/usr/local/openssl <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/openssl
$ <span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span>
$ <span class="token builtin class-name">echo</span> <span class="token string">&quot;/usr/local/lib64/&quot;</span> <span class="token operator">&gt;&gt;</span> /etc/ld.so.conf
$ <span class="token builtin class-name">echo</span> <span class="token string">&quot;/usr/local/openssl/lib&quot;</span> <span class="token operator">&gt;&gt;</span> /etc/ld.so.conf
$ ldconfig
$ <span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/openssl/bin/openssl  /usr/local/bin/openssl <span class="token comment"># 替换系统openssl，非必须</span>
$ openssl version <span class="token parameter variable">-a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),d=n("p",null,"libsrtp 安装",-1),b={href:"https://codeload.github.com/cisco/libsrtp/tar.gz/refs/tags/v2.3.0",target:"_blank",rel:"noopener noreferrer"},m=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">tar</span> <span class="token parameter variable">-xvzf</span> libsrtp-2.3.0.tar.gz
$ <span class="token builtin class-name">cd</span> libsrtp-2.3.0
$ ./configure --enable-openssl --with-openssl-dir<span class="token operator">=</span>/usr/local/openssl
$ <span class="token function">make</span> <span class="token parameter variable">-j8</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于一些比较新的编译环境（如 GCC 10+），编译 libsrtp-2.3.0 可能会存在问题，可以考虑切换到 2.5.0 版本，即</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">wget</span> https://github.com/cisco/libsrtp/archive/refs/tags/v2.5.0.tar.gz
$ <span class="token function">tar</span> <span class="token parameter variable">-xvzf</span> libsrtp-2.5.0.tar.gz
$ <span class="token builtin class-name">cd</span> libsrtp-2.5.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),v=t(`<h2 id="编译" tabindex="-1"><a class="header-anchor" href="#编译" aria-hidden="true">#</a> 编译</h2><ul><li><p>下载 zlm 源码</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#国内用户推荐从同步镜像网站gitee下载</span>
<span class="token function">git</span> clone <span class="token parameter variable">--depth</span> <span class="token number">1</span> https://gitee.com/xia-chu/ZLMediaKit
<span class="token builtin class-name">cd</span> ZLMediaKit
<span class="token comment">#千万不要忘记执行这句命令</span>
<span class="token function">git</span> submodule update <span class="token parameter variable">--init</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>编译</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">mkdir</span> build
$ <span class="token builtin class-name">cd</span> build
$ cmake <span class="token punctuation">..</span> <span class="token parameter variable">-DENABLE_WEBRTC</span><span class="token operator">=</span>true  <span class="token parameter variable">-DOPENSSL_ROOT_DIR</span><span class="token operator">=</span>/usr/local/openssl  <span class="token parameter variable">-DOPENSSL_LIBRARIES</span><span class="token operator">=</span>/usr/local/openssl/lib
$ cmake <span class="token parameter variable">--build</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">--target</span> MediaServer

<span class="token comment"># 最终输出</span>
<span class="token punctuation">[</span> <span class="token number">96</span>%<span class="token punctuation">]</span> Built target test_rtcp_fci
<span class="token punctuation">[</span> <span class="token number">96</span>%<span class="token punctuation">]</span> Building CXX object tests/CMakeFiles/test_rtp.dir/test_rtp.cpp.o
<span class="token punctuation">[</span> <span class="token number">97</span>%<span class="token punctuation">]</span> Linking CXX executable <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/release/linux/Debug/test_rtp
<span class="token punctuation">[</span> <span class="token number">97</span>%<span class="token punctuation">]</span> Built target test_rtp
<span class="token punctuation">[</span> <span class="token number">97</span>%<span class="token punctuation">]</span> Building CXX object tests/CMakeFiles/test_wsServer.dir/test_wsServer.cpp.o
<span class="token punctuation">[</span> <span class="token number">97</span>%<span class="token punctuation">]</span> Linking CXX executable <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/release/linux/Debug/test_wsServer
<span class="token punctuation">[</span> <span class="token number">97</span>%<span class="token punctuation">]</span> Built target test_wsServer
<span class="token punctuation">[</span> <span class="token number">97</span>%<span class="token punctuation">]</span> Building CXX object tests/CMakeFiles/test_server.dir/test_server.cpp.o
<span class="token punctuation">[</span> <span class="token number">97</span>%<span class="token punctuation">]</span> Linking CXX executable <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/release/linux/Debug/test_server
<span class="token punctuation">[</span> <span class="token number">97</span>%<span class="token punctuation">]</span> Built target test_server
<span class="token punctuation">[</span> <span class="token number">98</span>%<span class="token punctuation">]</span> Built target jsoncpp
<span class="token punctuation">[</span> <span class="token number">98</span>%<span class="token punctuation">]</span> Linking CXX executable <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/release/linux/Debug/MediaServer
<span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span> Built target MediaServer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="修改配置文件" tabindex="-1"><a class="header-anchor" href="#修改配置文件" aria-hidden="true">#</a> 修改配置文件</h2><p>由于 webrtc 协议需要告知播放器服务器所在 ip，如果该 ip 对播放器不可见，会导致 webrtc 无法联通。请修改配置文件中<code>rtc.externIP</code>为播放器可见 ip，如果不设置该配置项，zlmediakit 将获取网卡 ip(一般是内网 ip)，那么将无法跨域 nat 使用 webrtc。</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">rtc</span><span class="token punctuation">]</span></span>
<span class="token comment">#rtc播放推流、播放超时时间</span>
<span class="token key attr-name">timeoutSec</span><span class="token punctuation">=</span><span class="token value attr-value">15</span>
<span class="token comment">#本机对rtc客户端的可见ip，作为服务器时一般为公网ip，置空时，会自动获取网卡ip</span>
<span class="token key attr-name">externIP</span><span class="token punctuation">=</span>
<span class="token comment">#rtc udp服务器监听端口号，所有rtc客户端将通过该端口传输stun/dtls/srtp/srtcp数据，</span>
<span class="token comment">#该端口是多线程的，同时支持客户端网络切换导致的连接迁移</span>
<span class="token comment">#需要注意的是，如果服务器在nat内，需要做端口映射时，必须确保外网映射端口跟该端口一致</span>
<span class="token key attr-name">port</span><span class="token punctuation">=</span><span class="token value attr-value">8000</span>
<span class="token comment">#设置remb比特率，非0时关闭twcc并开启remb。该设置在rtc推流时有效，可以控制推流画质</span>
<span class="token key attr-name">rembBitRate</span><span class="token punctuation">=</span><span class="token value attr-value">1000000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h2>`,6),k=n("code",null,"default.pem",-1),h=n("code",null,"default.zlmediakit.com",-1),g=n("code",null,"127.0.0.1",-1),_={href:"https://default.zlmediakit.com/webrtc/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/ZLMediaKit/ZLMediaKit/issues/1277",target:"_blank",rel:"noopener noreferrer"},x=n("h2",{id:"问题解决",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#问题解决","aria-hidden":"true"},"#"),s(" 问题解决")],-1),w=t(`<li><p>提示 <code>gmake[3]: *** No rule to make target </code>/usr/lib64/libssl.so&#39;, needed by <code>../release/linux/Debug/MediaServer&#39;. Stop.</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /usr/local/openssl/lib
<span class="token function">cp</span> <span class="token parameter variable">-r</span> ./* /usr/lib64/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),$=n("p",null,"ubuntu 编译",-1),z={href:"https://blog.csdn.net/haysonzeng/article/details/116754065",target:"_blank",rel:"noopener noreferrer"},B=n("p",null,"windows 编译",-1),C={href:"https://blog.csdn.net/byna11sina11/article/details/119786889",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com/ZLMediaKit/ZLMediaKit/issues/1081#issuecomment-910141630",target:"_blank",rel:"noopener noreferrer"},S=t('<h2 id="q-and-a-播放问题" tabindex="-1"><a class="header-anchor" href="#q-and-a-播放问题" aria-hidden="true">#</a> Q And A(播放问题) ?</h2><ul><li><p>obs 推流 rtc 播放一卡一卡？</p><p>web 的 rtc h264 不支持 B 帧，需要去掉 B 帧, 使用 FFmpeg 时需要添加<code>-bf 0</code>参数，或者指定 h264 profile 为 baseline</p></li><li><p>rtsp 推流，rtc 播放不成功？</p><p>rtsp 推流需要把 zlm 的配置文件中的 directProxy 设置为 0</p></li><li><p>webrtc 视频或者音频播放不出来？</p><p>web 客户端的 rtc 支持 h264,opus/48000/2,pcma/8000,pcmu/8000 等编码格式，检查一下编码格式是否正确，一般都是音频不支持，需要使用 transcode 分支来转码（视频不会转码）</p></li></ul>',2);function X(M,y){const a=i("ExternalLinkIcon");return p(),c("div",null,[r,n("ul",null,[u,n("li",null,[d,n("p",null,[s("点击"),n("a",b,[s("这里"),e(a)]),s("下载安装")]),m])]),v,n("p",null,[s("最新的 zlmediakit 源码自带有效的 ssl 证书"),k,s(",对应的域名是"),h,s(",该域名解析到的 ip 为"),g,s(",用户在浏览器中打开 "),n("a",_,[s("https://default.zlmediakit.com/webrtc/"),e(a)]),s("即可开始测试。请先推流后，再测试播放。如果 webrtc 无法播放， 请参考此"),n("a",f,[s("issue"),e(a)])]),x,n("ul",null,[w,n("li",null,[$,n("p",null,[s("可以参考网友大神自制"),n("a",z,[s("这里"),e(a)])])]),n("li",null,[B,n("p",null,[s("可以参考网友大神自制"),n("a",C,[s("这里"),e(a)])]),n("p",null,[s("还有"),n("a",L,[s("这里"),e(a)])])])]),S])}const N=l(o,[["render",X],["__file","webrtc_compilation_and_use.html.vue"]]);export{N as default};
