import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,o as p,c,a as e,b as i,d as t,w as n,e as r}from"./app-CF_X8wgR.js";const u={},h=e("h1",{id:"an-high-performance-enterprise-level-streaming-media-service-framework-based-on-c-11",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#an-high-performance-enterprise-level-streaming-media-service-framework-based-on-c-11","aria-hidden":"true"},"#"),t(" An high-performance, enterprise-level streaming media service framework based on C++11.")],-1),m={href:"https://github.com/ZLMediaKit/ZLMediaKit/blob/master/LICENSE",target:"_blank",rel:"noopener noreferrer"},g=e("img",{src:"https://img.shields.io/badge/license-MIT-green.svg",alt:"badge",loading:"lazy"},null,-1),b={href:"https://en.cppreference.com/",target:"_blank",rel:"noopener noreferrer"},f=e("img",{src:"https://img.shields.io/badge/language-c++-red.svg",alt:"badge",loading:"lazy"},null,-1),_={href:"https://github.com/ZLMediaKit/ZLMediaKit",target:"_blank",rel:"noopener noreferrer"},v=e("img",{src:"https://img.shields.io/badge/platform-linux | macos | windows-blue.svg",alt:"badge",loading:"lazy"},null,-1),S={href:"https://github.com/ZLMediaKit/ZLMediaKit/pulls",target:"_blank",rel:"noopener noreferrer"},k=e("img",{src:"https://img.shields.io/badge/PRs-welcome-yellow.svg",alt:"badge",loading:"lazy"},null,-1),P={href:"https://github.com/ZLMediaKit/ZLMediaKit",target:"_blank",rel:"noopener noreferrer"},w=e("img",{src:"https://github.com/ZLMediaKit/ZLMediaKit/actions/workflows/android.yml/badge.svg",alt:"badge",loading:"lazy"},null,-1),T={href:"https://github.com/ZLMediaKit/ZLMediaKit",target:"_blank",rel:"noopener noreferrer"},M=e("img",{src:"https://github.com/ZLMediaKit/ZLMediaKit/actions/workflows/linux.yml/badge.svg",alt:"badge",loading:"lazy"},null,-1),y={href:"https://github.com/ZLMediaKit/ZLMediaKit",target:"_blank",rel:"noopener noreferrer"},R=e("img",{src:"https://github.com/ZLMediaKit/ZLMediaKit/actions/workflows/macos.yml/badge.svg",alt:"badge",loading:"lazy"},null,-1),L={href:"https://github.com/ZLMediaKit/ZLMediaKit",target:"_blank",rel:"noopener noreferrer"},H=e("img",{src:"https://github.com/ZLMediaKit/ZLMediaKit/actions/workflows/windows.yml/badge.svg",alt:"badge",loading:"lazy"},null,-1),x={href:"https://hub.docker.com/r/zlmediakit/zlmediakit/tags",target:"_blank",rel:"noopener noreferrer"},K=e("img",{src:"https://github.com/ZLMediaKit/ZLMediaKit/actions/workflows/docker.yml/badge.svg",alt:"badge",loading:"lazy"},null,-1),C={href:"https://hub.docker.com/r/zlmediakit/zlmediakit/tags",target:"_blank",rel:"noopener noreferrer"},Z=e("img",{src:"https://img.shields.io/docker/pulls/zlmediakit/zlmediakit",alt:"badge",loading:"lazy"},null,-1),A=e("h2",{id:"project-features",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#project-features","aria-hidden":"true"},"#"),t(" Project Features")],-1),z=e("li",null,"Developed with C++11, avoiding the use of raw pointers, providing stable and reliable code with superior performance.",-1),I=e("li",null,"Supports multiple protocols (RTSP/RTMP/HLS/HTTP-FLV/WebSocket-FLV/GB28181/HTTP-TS/WebSocket-TS/HTTP-fMP4/WebSocket-fMP4/MP4/WebRTC), and protocol conversion.",-1),O=e("li",null,"Developed with multiplexing/multithreading/asynchronous network IO models, providing excellent concurrency performance and supporting massive client connections.",-1),E=e("li",null,"The code has undergone extensive stability and performance testing, and has been extensively used in production environments.",-1),W=e("li",null,"Supports all major platforms, including linux, macos, ios, android, and windows.",-1),G=e("li",null,"Supports multiple instruction set platforms, such as x86, arm, risc-v, mips, Loongson, and Shenwei.",-1),F={href:"https://github.com/ZLMediaKit/ZLMediaKit/tree/master/api/include",target:"_blank",rel:"noopener noreferrer"},U={href:"https://github.com/ZLMediaKit/ZLMediaKit/tree/master/server",target:"_blank",rel:"noopener noreferrer"},D=e("li",null,"Bridges the video surveillance protocol stack and the live streaming protocol stack, and provides comprehensive support for RTSP/RTMP.",-1),V=e("li",null,"Fully supports H265/H264/AAC/G711/OPUS.",-1),j=e("li",null,"Provides complete functions, including clustering, on-demand protocol conversion, on-demand push/pull streams, playback before publishing, and continuous publishing after disconnection.",-1),N=e("li",null,"Provides ultimate performance, supporting 10W-level players on a single machine and 100Gb/s-level IO bandwidth capability.",-1),B={href:"https://github.com/ZLMediaKit/ZLMediaKit/issues/511",target:"_blank",rel:"noopener noreferrer"},q=e("li",null,"Fully supports IPv6 networks.",-1),Q=r('<h2 id="project-positioning" tabindex="-1"><a class="header-anchor" href="#project-positioning" aria-hidden="true">#</a> Project Positioning</h2><ul><li>Cross-platform streaming media solution for mobile and embedded systems.</li><li>Commercial-grade streaming media server.</li><li>Network programming secondary development SDK.</li></ul><h2 id="feature-list" tabindex="-1"><a class="header-anchor" href="#feature-list" aria-hidden="true">#</a> Feature List</h2><h3 id="overview-of-features" tabindex="-1"><a class="header-anchor" href="#overview-of-features" aria-hidden="true">#</a> Overview of Features</h3>',4),Y=r("<li><p>RTSP[S]</p><ul><li>RTSP[S] server, supports RTMP/MP4/HLS to RTSP[S] conversion, supports devices such as Amazon Echo Show</li><li>RTSP[S] player, supports RTSP proxy, supports generating silent audio</li><li>RTSP[S] push client and server</li><li>Supports four RTP transmission modes: <code>rtp over udp</code> <code>rtp over tcp</code> <code>rtp over http</code> <code>rtp multicast</code></li><li>Server/client fully supports Basic/Digest authentication, asynchronous configurable authentication interface</li><li>Supports H265 encoding</li><li>The server supports RTSP pushing (including <code>rtp over udp</code> and <code>rtp over tcp</code>)</li><li>Supports H264/H265/AAC/G711/OPUS/MJPEG encoding. Other encodings can be forwarded but cannot be converted to protocol</li></ul></li>",1),J=e("p",null,"RTMP[S]",-1),X=e("li",null,"RTMP[S] playback server, supports RTSP/MP4/HLS to RTMP conversion",-1),$=e("li",null,"RTMP[S] publishing server, supports recording and publishing streams",-1),ee=e("li",null,"RTMP[S] player, supports RTMP proxy, supports generating silent audio",-1),te=e("li",null,"RTMP[S] push client",-1),ie=e("li",null,"Supports http[s]-flv live streaming server",-1),oe=e("li",null,"Supports http[s]-flv live streaming player",-1),se=e("li",null,"Supports websocket-flv live streaming",-1),ne=e("li",null,"Supports H264/H265/AAC/G711/OPUS encoding. Other encodings can be forwarded but cannot be converted to protocol",-1),re={href:"https://github.com/ksvc/FFmpeg/wiki",target:"_blank",rel:"noopener noreferrer"},ae={href:"https://github.com/veovera/enhanced-rtmp",target:"_blank",rel:"noopener noreferrer"},le=r("<li><p>HLS</p><ul><li>Supports HLS file(mpegts/fmp4) generation and comes with an HTTP file server</li><li>Through cookie tracking technology, it can simulate HLS playback as a long connection, which can achieve HLS on-demand pulling, playback statistics, and other businesses</li><li>Supports HLS player and can pull HLS to rtsp/rtmp/mp4</li><li>Supports H264/H265/AAC/G711/OPUS encoding</li></ul></li><li><p>TS</p><ul><li>Supports http[s]-ts live streaming</li><li>Supports ws[s]-ts live streaming</li><li>Supports H264/H265/AAC/G711/OPUS encoding</li></ul></li><li><p>fMP4</p><ul><li>Supports http[s]-fmp4 live streaming</li><li>Supports ws[s]-fmp4 live streaming</li><li>Supports H264/H265/AAC/G711/OPUS/MJPEG encoding</li></ul></li><li><p>http[s] and WebSocket</p><ul><li>The server supports <code>directory index generation</code>, <code>file download</code>, <code>form submission requests</code></li><li>The client provides <code>file downloader (supports resume breakpoint)</code>, <code>interface requestor</code>, <code>file uploader</code></li><li>Complete HTTP API server, which can be used as a web backend development framework</li><li>Supports cross-domain access</li><li>Supports http client/server cookie</li><li>Supports WebSocket server and client</li><li>Supports http file access authentication</li></ul></li><li><p>GB28181 and RTP Streaming</p><ul><li>Supports UDP/TCP RTP (PS/TS/ES) streaming server, which can be converted to RTSP/RTMP/HLS and other protocols</li><li>Supports RTSP/RTMP/HLS and other protocol conversion to RTP streaming client, supports TCP/UDP mode, provides corresponding RESTful API, supports active and passive modes</li><li>Supports H264/H265/AAC/G711/OPUS encoding</li><li>Supports ES/PS/TS/EHOME RTP streaming</li><li>Supports ES/PS RTP forwarding</li><li>Supports GB28181 active pull mode</li><li>Supports two-way voice intercom</li></ul></li><li><p>MP4 VOD and Recording</p><ul><li>Supports recording as FLV/HLS/MP4</li><li>Supports MP4 file playback for RTSP/RTMP/HTTP-FLV/WS-FLV, supports seek</li><li>Supports H264/H265/AAC/G711/OPUS encoding</li></ul></li><li><p>WebRTC</p><ul><li>Supports WebRTC streaming and conversion to other protocols</li><li>Supports WebRTC playback and conversion from other protocols to WebRTC</li><li>Supports two-way echo testing</li><li>Supports simulcast streaming</li><li>Supports uplink and downlink RTX/NACK packet loss retransmission</li><li><strong>Supports single-port, multi-threaded, and client network connection migration (unique in the open source community)</strong>.</li><li>Supports TWCC RTCP dynamic rate control</li><li>Supports REMB/PLI/SR/RR RTCP</li><li>Supports RTP extension parsing</li><li>Supports GOP buffer and instant WebRTC playback</li><li>Supports data channels</li><li>Supports WebRTC over TCP mode</li><li>Excellent NACK and jitter buffer algorithms with outstanding packet loss resistance</li><li>Supports WHIP/WHEP protocols</li></ul></li>",7),de=r("<li><p>Others</p><ul><li>Supports rich RESTful APIs and webhook events</li><li>Supports simple Telnet debugging</li><li>Supports hot reloading of configuration files</li><li>Supports traffic statistics, stream authentication, and other events</li><li>Supports virtual hosts for isolating different domain names</li><li>Supports on-demand streaming and automatic shutdown of streams with no viewers</li><li>Supports pre-play before streaming to increase the rate of timely stream openings</li><li>Provides a complete and powerful C API SDK</li><li>Supports FFmpeg stream proxy for any format</li><li>Supports HTTP API for real-time screenshot generation and return</li><li>Supports on-demand demultiplexing and protocol conversion, reducing CPU usage by only enabling it when someone is watching</li><li>Supports cluster deployment in traceable mode, with RTSP/RTMP/HLS/HTTP-TS support for traceable mode and HLS support for edge stations and multiple sources for source stations (using round-robin tracing)</li><li>Can reconnect to streaming after abnormal disconnection in RTSP/RTMP/WebRTC pushing within a timeout period, with no impact on the player.</li></ul></li>",1),pe=e("h2",{id:"how-to-build",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#how-to-build","aria-hidden":"true"},"#"),t(" How to build")],-1),ce=e("h2",{id:"how-to-use",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#how-to-use","aria-hidden":"true"},"#"),t(" How to use")],-1),ue=e("p",null,"You have three ways to use ZLMediaKit, namely:",-1),he={href:"https://github.com/ZLMediaKit/ZLMediaKit/tree/master/api/include",target:"_blank",rel:"noopener noreferrer"},me={start:"2"},ge=e("li",null,[e("ol",{start:"3"},[e("li",null,"If you want to do c/c++ development and add business logic to increase functions, you can refer to the [test program] here (https://github.com/ZLMediaKit/ZLMediaKit/tree/master/tests).")])],-1),be=r(`<h2 id="docker-image" tabindex="-1"><a class="header-anchor" href="#docker-image" aria-hidden="true">#</a> Docker image</h2><p>You can download the compiled image from Docker Hub and start it:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#This image is automatically compiled and pushed for github continuous integration, keeping it up to date with the code (master branch)</span>
<span class="token function">docker</span> run <span class="token parameter variable">-id</span> <span class="token parameter variable">-p</span> <span class="token number">1935</span>:1935 <span class="token parameter variable">-p</span> <span class="token number">8080</span>:80 <span class="token parameter variable">-p</span> <span class="token number">8443</span>:443 <span class="token parameter variable">-p</span> <span class="token number">8554</span>:554 <span class="token parameter variable">-p</span> <span class="token number">10000</span>:10000 <span class="token parameter variable">-p</span> <span class="token number">10000</span>:10000/udp <span class="token parameter variable">-p</span> <span class="token number">8000</span>:8000/udp <span class="token parameter variable">-p</span> <span class="token number">9000</span>:9000/udp zlmediakit/zlmediakit:master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also compile the image according to the Dockerfile:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">bash</span> build_docker_images.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5);function fe(_e,ve){const o=a("ExternalLinkIcon"),s=a("RouterLink"),l=a("Mermaid");return p(),c("div",null,[h,e("p",null,[e("a",m,[g,i(o)]),e("a",b,[f,i(o)]),e("a",_,[v,i(o)]),e("a",S,[k,i(o)])]),e("p",null,[e("a",P,[w,i(o)]),e("a",T,[M,i(o)]),e("a",y,[R,i(o)]),e("a",L,[H,i(o)])]),e("p",null,[e("a",x,[K,i(o)]),e("a",C,[Z,i(o)])]),A,e("ul",null,[z,I,O,E,W,G,e("li",null,[t("Provides ultra-fast startup, extremely low latency ("),i(s,{to:"/reference/test/delay_test.html"},{default:n(()=>[t("within 500 milliseconds, and can be as low as 100 milliseconds")]),_:1}),t("), and excellent user experience.")]),e("li",null,[t("Provides a comprehensive standard "),e("a",F,[t("C API"),i(o)]),t(" that can be used as an SDK or called by other languages.")]),e("li",null,[t("Provides a complete "),e("a",U,[t("MediaServer"),i(o)]),t(" server, which can be deployed directly as a commercial server without additional development.")]),e("li",null,[t("Provides a complete "),i(s,{to:"/guide/media_server/restful_api.html"},{default:n(()=>[t("restful api")]),_:1}),t(" and "),i(s,{to:"/guide/media_server/web_hook_api.html"},{default:n(()=>[t("web hook")]),_:1}),t(", supporting rich business logic.")]),D,V,j,N,e("li",null,[t("Provides ultimate user experience with "),i(s,{to:"/reference/documents/exclusive_features.html"},{default:n(()=>[t("exclusive features")]),_:1}),t(".")]),e("li",null,[e("a",B,[t("Who is using zlmediakit?"),i(o)])]),q]),Q,i(l,{id:"mermaid-128",code:"eJx1k99PgzAQx9/3V/QRH4jR+GB8MGHQyTKQhnYz2iwLYcyRzLGwTmOc/7vXH9BNGAn0eve5b69H67ruQJRiUzygUZGJQ13sB9K32lRf+TqrBWLBAMHj8ZTFZI5c9/FIpjRESYrINIqOaOiMt3n1UW7f0V7URaasXV2JKq82VzpZZtP+bAN4PGSMuIxeq3EUza7DiDYZZ6RBY3LXDT8Nb+9v7m+4Ge2KDfCChynzuR66YZoyDm83gMMkxlx9u8HxM5myRcJCnPJErIu63b+tEM3GHhqNYoKfmrShDCL/5y2Ki2WZTUrxq/y+9Ac8OYjdQfQ0da6oQGXLMihLsRfzVfawytw8qxE57Nc2z+BAQ8tS7Cdp4ICF6iKv6iUA+idJQLeFRN6ro00TkktF4xk2K0XlZ2H0rTi0TSXCiHab7NuqzpLAgVc7rAxE5Klw5AdJyR4AzsFCOhwwLjFwTjQDhjpAMECf7y7xzOCMXlwVss2y5zq226b4hfSoHfQCcQvEfYA5pZoxE401+25VTiROYvIiLOScOM216TDwI2niTzAzYDu3tOlIIwhTo8fof8CqKcqKNWjbu7Y86WjqA7uLnVSo2ZMSVcIfdihA0w=="}),e("ul",null,[Y,e("li",null,[J,e("ul",null,[X,$,ee,te,ie,oe,se,ne,e("li",null,[t("Supports "),e("a",re,[t("RTMP-H265"),i(o)])]),e("li",null,[t("Supports "),i(s,{to:"/reference/resources/rtmp_support_for_h265_and_opus.html"},{default:n(()=>[t("RTMP-OPUS")]),_:1})]),e("li",null,[t("Supports "),e("a",ae,[t("enhanced-rtmp(H265)"),i(o)])])])]),le,e("li",null,[e("p",null,[i(s,{to:"/guide/protocol/srt/"},{default:n(()=>[t("SRT support")]),_:1})])]),de]),pe,e("p",null,[t("It is recommended to compile on Ubuntu or macOS. Compiling on Windows is cumbersome, and some features are not compiled by default. "),i(s,{to:"/tutorial/"},{default:n(()=>[t("For details, please refer to Quick Start")]),_:1})]),ce,ue,e("ul",null,[e("li",null,[e("ol",null,[e("li",null,[t("Use c api as sdk, please refer to "),e("a",he,[t("here"),i(o)]),t(".")])])]),e("li",null,[e("ol",me,[e("li",null,[t("Used as an independent streaming media server. If you don’t want to do c/c++ development, you can refer to "),i(s,{to:"/guide/media_server/restful_api.html"},{default:n(()=>[t("restful api")]),_:1}),t(" and "),i(s,{to:"/guide/media_server/web_hook_api.html"},{default:n(()=>[t("web hook")]),_:1}),t(".")])])]),ge]),be])}const Pe=d(u,[["render",fe],["__file","index.html.vue"]]);export{Pe as default};
